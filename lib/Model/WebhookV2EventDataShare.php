<?php
/**
 * WebhookV2EventDataShare
 *
 * PHP version 5
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ExaVault\Model;

use \ArrayAccess;
use \ExaVault\ObjectSerializer;

/**
 * WebhookV2EventDataShare Class Doc Comment
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebhookV2EventDataShare implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WebhookV2EventData_share';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'hasPassword' => 'bool',
'isPublic' => 'bool',
'accessMode' => '\ExaVault\Model\AccessMode',
'accessDescription' => 'string',
'embed' => 'bool',
'hash' => 'string',
'ownerHash' => 'string',
'expiration' => 'string',
'trackingStatus' => 'string',
'expired' => 'bool',
'resent' => 'bool',
'type' => 'string',
'requireEmail' => 'bool',
'fileDropCreateFolders' => 'bool',
'formId' => 'int',
'assets' => 'string[]',
'paths' => 'string[]',
'recipients' => '\ExaVault\Model\ShareRecipient[]',
'messages' => '\ExaVault\Model\ShareMessage[]',
'inherited' => 'bool',
'status' => 'int',
'hasNotification' => 'bool',
'created' => '\DateTime',
'modified' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'hasPassword' => null,
'isPublic' => null,
'accessMode' => null,
'accessDescription' => null,
'embed' => null,
'hash' => null,
'ownerHash' => null,
'expiration' => null,
'trackingStatus' => null,
'expired' => null,
'resent' => null,
'type' => null,
'requireEmail' => null,
'fileDropCreateFolders' => null,
'formId' => null,
'assets' => null,
'paths' => null,
'recipients' => null,
'messages' => null,
'inherited' => null,
'status' => null,
'hasNotification' => null,
'created' => 'date-time',
'modified' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'hasPassword' => 'hasPassword',
'isPublic' => 'isPublic',
'accessMode' => 'accessMode',
'accessDescription' => 'accessDescription',
'embed' => 'embed',
'hash' => 'hash',
'ownerHash' => 'ownerHash',
'expiration' => 'expiration',
'trackingStatus' => 'trackingStatus',
'expired' => 'expired',
'resent' => 'resent',
'type' => 'type',
'requireEmail' => 'requireEmail',
'fileDropCreateFolders' => 'fileDropCreateFolders',
'formId' => 'formId',
'assets' => 'assets',
'paths' => 'paths',
'recipients' => 'recipients',
'messages' => 'messages',
'inherited' => 'inherited',
'status' => 'status',
'hasNotification' => 'hasNotification',
'created' => 'created',
'modified' => 'modified'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'hasPassword' => 'setHasPassword',
'isPublic' => 'setIsPublic',
'accessMode' => 'setAccessMode',
'accessDescription' => 'setAccessDescription',
'embed' => 'setEmbed',
'hash' => 'setHash',
'ownerHash' => 'setOwnerHash',
'expiration' => 'setExpiration',
'trackingStatus' => 'setTrackingStatus',
'expired' => 'setExpired',
'resent' => 'setResent',
'type' => 'setType',
'requireEmail' => 'setRequireEmail',
'fileDropCreateFolders' => 'setFileDropCreateFolders',
'formId' => 'setFormId',
'assets' => 'setAssets',
'paths' => 'setPaths',
'recipients' => 'setRecipients',
'messages' => 'setMessages',
'inherited' => 'setInherited',
'status' => 'setStatus',
'hasNotification' => 'setHasNotification',
'created' => 'setCreated',
'modified' => 'setModified'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'hasPassword' => 'getHasPassword',
'isPublic' => 'getIsPublic',
'accessMode' => 'getAccessMode',
'accessDescription' => 'getAccessDescription',
'embed' => 'getEmbed',
'hash' => 'getHash',
'ownerHash' => 'getOwnerHash',
'expiration' => 'getExpiration',
'trackingStatus' => 'getTrackingStatus',
'expired' => 'getExpired',
'resent' => 'getResent',
'type' => 'getType',
'requireEmail' => 'getRequireEmail',
'fileDropCreateFolders' => 'getFileDropCreateFolders',
'formId' => 'getFormId',
'assets' => 'getAssets',
'paths' => 'getPaths',
'recipients' => 'getRecipients',
'messages' => 'getMessages',
'inherited' => 'getInherited',
'status' => 'getStatus',
'hasNotification' => 'getHasNotification',
'created' => 'getCreated',
'modified' => 'getModified'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['hasPassword'] = isset($data['hasPassword']) ? $data['hasPassword'] : null;
        $this->container['isPublic'] = isset($data['isPublic']) ? $data['isPublic'] : null;
        $this->container['accessMode'] = isset($data['accessMode']) ? $data['accessMode'] : null;
        $this->container['accessDescription'] = isset($data['accessDescription']) ? $data['accessDescription'] : null;
        $this->container['embed'] = isset($data['embed']) ? $data['embed'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['ownerHash'] = isset($data['ownerHash']) ? $data['ownerHash'] : null;
        $this->container['expiration'] = isset($data['expiration']) ? $data['expiration'] : null;
        $this->container['trackingStatus'] = isset($data['trackingStatus']) ? $data['trackingStatus'] : null;
        $this->container['expired'] = isset($data['expired']) ? $data['expired'] : null;
        $this->container['resent'] = isset($data['resent']) ? $data['resent'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['requireEmail'] = isset($data['requireEmail']) ? $data['requireEmail'] : null;
        $this->container['fileDropCreateFolders'] = isset($data['fileDropCreateFolders']) ? $data['fileDropCreateFolders'] : null;
        $this->container['formId'] = isset($data['formId']) ? $data['formId'] : null;
        $this->container['assets'] = isset($data['assets']) ? $data['assets'] : null;
        $this->container['paths'] = isset($data['paths']) ? $data['paths'] : null;
        $this->container['recipients'] = isset($data['recipients']) ? $data['recipients'] : null;
        $this->container['messages'] = isset($data['messages']) ? $data['messages'] : null;
        $this->container['inherited'] = isset($data['inherited']) ? $data['inherited'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['hasNotification'] = isset($data['hasNotification']) ? $data['hasNotification'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique ID of associated receive folder
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of receiv
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets hasPassword
     *
     * @return bool
     */
    public function getHasPassword()
    {
        return $this->container['hasPassword'];
    }

    /**
     * Sets hasPassword
     *
     * @param bool $hasPassword Whether the receive folder requires visitors to enter a password
     *
     * @return $this
     */
    public function setHasPassword($hasPassword)
    {
        $this->container['hasPassword'] = $hasPassword;

        return $this;
    }

    /**
     * Gets isPublic
     *
     * @return bool
     */
    public function getIsPublic()
    {
        return $this->container['isPublic'];
    }

    /**
     * Sets isPublic
     *
     * @param bool $isPublic Whether visitors can acccess the receive folder without an invitation link
     *
     * @return $this
     */
    public function setIsPublic($isPublic)
    {
        $this->container['isPublic'] = $isPublic;

        return $this;
    }

    /**
     * Gets accessMode
     *
     * @return \ExaVault\Model\AccessMode
     */
    public function getAccessMode()
    {
        return $this->container['accessMode'];
    }

    /**
     * Sets accessMode
     *
     * @param \ExaVault\Model\AccessMode $accessMode accessMode
     *
     * @return $this
     */
    public function setAccessMode($accessMode)
    {
        $this->container['accessMode'] = $accessMode;

        return $this;
    }

    /**
     * Gets accessDescription
     *
     * @return string
     */
    public function getAccessDescription()
    {
        return $this->container['accessDescription'];
    }

    /**
     * Sets accessDescription
     *
     * @param string $accessDescription Human readable description of what visitors are allowed to do with the receive folder
     *
     * @return $this
     */
    public function setAccessDescription($accessDescription)
    {
        $this->container['accessDescription'] = $accessDescription;

        return $this;
    }

    /**
     * Gets embed
     *
     * @return bool
     */
    public function getEmbed()
    {
        return $this->container['embed'];
    }

    /**
     * Sets embed
     *
     * @param bool $embed Whether the receive folder can be embedded within a web page
     *
     * @return $this
     */
    public function setEmbed($embed)
    {
        $this->container['embed'] = $embed;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string $hash Hash value of the receive
     *
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets ownerHash
     *
     * @return string
     */
    public function getOwnerHash()
    {
        return $this->container['ownerHash'];
    }

    /**
     * Sets ownerHash
     *
     * @param string $ownerHash Hash value of the user who \"owns\" the receive fo
     *
     * @return $this
     */
    public function setOwnerHash($ownerHash)
    {
        $this->container['ownerHash'] = $ownerHash;

        return $this;
    }

    /**
     * Gets expiration
     *
     * @return string
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     *
     * @param string $expiration Date and time when the receive folder will no longer be
     *
     * @return $this
     */
    public function setExpiration($expiration)
    {
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets trackingStatus
     *
     * @return string
     */
    public function getTrackingStatus()
    {
        return $this->container['trackingStatus'];
    }

    /**
     * Sets trackingStatus
     *
     * @param string $trackingStatus Status of invitations sent for this receive folder
     *
     * @return $this
     */
    public function setTrackingStatus($trackingStatus)
    {
        $this->container['trackingStatus'] = $trackingStatus;

        return $this;
    }

    /**
     * Gets expired
     *
     * @return bool
     */
    public function getExpired()
    {
        return $this->container['expired'];
    }

    /**
     * Sets expired
     *
     * @param bool $expired Whether access to the receive folder has expired
     *
     * @return $this
     */
    public function setExpired($expired)
    {
        $this->container['expired'] = $expired;

        return $this;
    }

    /**
     * Gets resent
     *
     * @return bool
     */
    public function getResent()
    {
        return $this->container['resent'];
    }

    /**
     * Sets resent
     *
     * @param bool $resent Whether invitations to the receive folder have been re-sent to recipients
     *
     * @return $this
     */
    public function setResent($resent)
    {
        $this->container['resent'] = $resent;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of share **\"receive\"**
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets requireEmail
     *
     * @return bool
     */
    public function getRequireEmail()
    {
        return $this->container['requireEmail'];
    }

    /**
     * Sets requireEmail
     *
     * @param bool $requireEmail Whether visitors must enter their email addresses to access the receive folder
     *
     * @return $this
     */
    public function setRequireEmail($requireEmail)
    {
        $this->container['requireEmail'] = $requireEmail;

        return $this;
    }

    /**
     * Gets fileDropCreateFolders
     *
     * @return bool
     */
    public function getFileDropCreateFolders()
    {
        return $this->container['fileDropCreateFolders'];
    }

    /**
     * Sets fileDropCreateFolders
     *
     * @param bool $fileDropCreateFolders Whether files should be automatically placed in subfolders of the receive folder
     *
     * @return $this
     */
    public function setFileDropCreateFolders($fileDropCreateFolders)
    {
        $this->container['fileDropCreateFolders'] = $fileDropCreateFolders;

        return $this;
    }

    /**
     * Gets formId
     *
     * @return int
     */
    public function getFormId()
    {
        return $this->container['formId'];
    }

    /**
     * Sets formId
     *
     * @param int $formId ID of the associated form
     *
     * @return $this
     */
    public function setFormId($formId)
    {
        $this->container['formId'] = $formId;

        return $this;
    }

    /**
     * Gets assets
     *
     * @return string[]
     */
    public function getAssets()
    {
        return $this->container['assets'];
    }

    /**
     * Sets assets
     *
     * @param string[] $assets List of items included in the share
     *
     * @return $this
     */
    public function setAssets($assets)
    {
        $this->container['assets'] = $assets;

        return $this;
    }

    /**
     * Gets paths
     *
     * @return string[]
     */
    public function getPaths()
    {
        return $this->container['paths'];
    }

    /**
     * Sets paths
     *
     * @param string[] $paths List
     *
     * @return $this
     */
    public function setPaths($paths)
    {
        $this->container['paths'] = $paths;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return \ExaVault\Model\ShareRecipient[]
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param \ExaVault\Model\ShareRecipient[] $recipients List of recipients invited  to the receive folder
     *
     * @return $this
     */
    public function setRecipients($recipients)
    {
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return \ExaVault\Model\ShareMessage[]
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param \ExaVault\Model\ShareMessage[] $messages Invitation messages sent for receive folder
     *
     * @return $this
     */
    public function setMessages($messages)
    {
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets inherited
     *
     * @return bool
     */
    public function getInherited()
    {
        return $this->container['inherited'];
    }

    /**
     * Sets inherited
     *
     * @param bool $inherited Whether this share is inherited from a parent fol
     *
     * @return $this
     */
    public function setInherited($inherited)
    {
        $this->container['inherited'] = $inherited;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status 1 if share is active. 0 if not.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets hasNotification
     *
     * @return bool
     */
    public function getHasNotification()
    {
        return $this->container['hasNotification'];
    }

    /**
     * Sets hasNotification
     *
     * @param bool $hasNotification Whether delivery receipts are enabled for this share
     *
     * @return $this
     */
    public function setHasNotification($hasNotification)
    {
        $this->container['hasNotification'] = $hasNotification;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Date and ti
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified Date and time when the share was last changed
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
