<?php
/**
 * PlanDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ExaVault\Model;

use \ArrayAccess;
use \ExaVault\ObjectSerializer;

/**
 * PlanDetails Class Doc Comment
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlanDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlanDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'storageAddOn' => 'int',
'ipWhitelist' => 'bool',
'userExpiration' => 'bool',
'userImport' => 'bool',
'customDomain' => 'bool',
'customName' => 'bool',
'colorSchema' => 'bool',
'apiKeys' => 'int',
'apiTokens' => 'int',
'sshKeys' => 'int',
'directLinks' => 'bool',
'sharingOptions' => 'string[]',
'webhookOptions' => '\ExaVault\Model\PlanDetailsWebhookOptions',
'unlimitedUsers' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'storageAddOn' => null,
'ipWhitelist' => null,
'userExpiration' => null,
'userImport' => null,
'customDomain' => null,
'customName' => null,
'colorSchema' => null,
'apiKeys' => null,
'apiTokens' => null,
'sshKeys' => null,
'directLinks' => null,
'sharingOptions' => null,
'webhookOptions' => null,
'unlimitedUsers' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'storageAddOn' => 'storageAddOn',
'ipWhitelist' => 'ipWhitelist',
'userExpiration' => 'userExpiration',
'userImport' => 'userImport',
'customDomain' => 'customDomain',
'customName' => 'customName',
'colorSchema' => 'colorSchema',
'apiKeys' => 'apiKeys',
'apiTokens' => 'apiTokens',
'sshKeys' => 'sshKeys',
'directLinks' => 'directLinks',
'sharingOptions' => 'sharingOptions',
'webhookOptions' => 'webhookOptions',
'unlimitedUsers' => 'unlimitedUsers'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'storageAddOn' => 'setStorageAddOn',
'ipWhitelist' => 'setIpWhitelist',
'userExpiration' => 'setUserExpiration',
'userImport' => 'setUserImport',
'customDomain' => 'setCustomDomain',
'customName' => 'setCustomName',
'colorSchema' => 'setColorSchema',
'apiKeys' => 'setApiKeys',
'apiTokens' => 'setApiTokens',
'sshKeys' => 'setSshKeys',
'directLinks' => 'setDirectLinks',
'sharingOptions' => 'setSharingOptions',
'webhookOptions' => 'setWebhookOptions',
'unlimitedUsers' => 'setUnlimitedUsers'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'storageAddOn' => 'getStorageAddOn',
'ipWhitelist' => 'getIpWhitelist',
'userExpiration' => 'getUserExpiration',
'userImport' => 'getUserImport',
'customDomain' => 'getCustomDomain',
'customName' => 'getCustomName',
'colorSchema' => 'getColorSchema',
'apiKeys' => 'getApiKeys',
'apiTokens' => 'getApiTokens',
'sshKeys' => 'getSshKeys',
'directLinks' => 'getDirectLinks',
'sharingOptions' => 'getSharingOptions',
'webhookOptions' => 'getWebhookOptions',
'unlimitedUsers' => 'getUnlimitedUsers'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['storageAddOn'] = isset($data['storageAddOn']) ? $data['storageAddOn'] : null;
        $this->container['ipWhitelist'] = isset($data['ipWhitelist']) ? $data['ipWhitelist'] : null;
        $this->container['userExpiration'] = isset($data['userExpiration']) ? $data['userExpiration'] : null;
        $this->container['userImport'] = isset($data['userImport']) ? $data['userImport'] : null;
        $this->container['customDomain'] = isset($data['customDomain']) ? $data['customDomain'] : null;
        $this->container['customName'] = isset($data['customName']) ? $data['customName'] : null;
        $this->container['colorSchema'] = isset($data['colorSchema']) ? $data['colorSchema'] : null;
        $this->container['apiKeys'] = isset($data['apiKeys']) ? $data['apiKeys'] : null;
        $this->container['apiTokens'] = isset($data['apiTokens']) ? $data['apiTokens'] : null;
        $this->container['sshKeys'] = isset($data['sshKeys']) ? $data['sshKeys'] : null;
        $this->container['directLinks'] = isset($data['directLinks']) ? $data['directLinks'] : null;
        $this->container['sharingOptions'] = isset($data['sharingOptions']) ? $data['sharingOptions'] : null;
        $this->container['webhookOptions'] = isset($data['webhookOptions']) ? $data['webhookOptions'] : null;
        $this->container['unlimitedUsers'] = isset($data['unlimitedUsers']) ? $data['unlimitedUsers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets storageAddOn
     *
     * @return int
     */
    public function getStorageAddOn()
    {
        return $this->container['storageAddOn'];
    }

    /**
     * Sets storageAddOn
     *
     * @param int $storageAddOn storageAddOn
     *
     * @return $this
     */
    public function setStorageAddOn($storageAddOn)
    {
        $this->container['storageAddOn'] = $storageAddOn;

        return $this;
    }

    /**
     * Gets ipWhitelist
     *
     * @return bool
     */
    public function getIpWhitelist()
    {
        return $this->container['ipWhitelist'];
    }

    /**
     * Sets ipWhitelist
     *
     * @param bool $ipWhitelist ipWhitelist
     *
     * @return $this
     */
    public function setIpWhitelist($ipWhitelist)
    {
        $this->container['ipWhitelist'] = $ipWhitelist;

        return $this;
    }

    /**
     * Gets userExpiration
     *
     * @return bool
     */
    public function getUserExpiration()
    {
        return $this->container['userExpiration'];
    }

    /**
     * Sets userExpiration
     *
     * @param bool $userExpiration userExpiration
     *
     * @return $this
     */
    public function setUserExpiration($userExpiration)
    {
        $this->container['userExpiration'] = $userExpiration;

        return $this;
    }

    /**
     * Gets userImport
     *
     * @return bool
     */
    public function getUserImport()
    {
        return $this->container['userImport'];
    }

    /**
     * Sets userImport
     *
     * @param bool $userImport userImport
     *
     * @return $this
     */
    public function setUserImport($userImport)
    {
        $this->container['userImport'] = $userImport;

        return $this;
    }

    /**
     * Gets customDomain
     *
     * @return bool
     */
    public function getCustomDomain()
    {
        return $this->container['customDomain'];
    }

    /**
     * Sets customDomain
     *
     * @param bool $customDomain customDomain
     *
     * @return $this
     */
    public function setCustomDomain($customDomain)
    {
        $this->container['customDomain'] = $customDomain;

        return $this;
    }

    /**
     * Gets customName
     *
     * @return bool
     */
    public function getCustomName()
    {
        return $this->container['customName'];
    }

    /**
     * Sets customName
     *
     * @param bool $customName customName
     *
     * @return $this
     */
    public function setCustomName($customName)
    {
        $this->container['customName'] = $customName;

        return $this;
    }

    /**
     * Gets colorSchema
     *
     * @return bool
     */
    public function getColorSchema()
    {
        return $this->container['colorSchema'];
    }

    /**
     * Sets colorSchema
     *
     * @param bool $colorSchema colorSchema
     *
     * @return $this
     */
    public function setColorSchema($colorSchema)
    {
        $this->container['colorSchema'] = $colorSchema;

        return $this;
    }

    /**
     * Gets apiKeys
     *
     * @return int
     */
    public function getApiKeys()
    {
        return $this->container['apiKeys'];
    }

    /**
     * Sets apiKeys
     *
     * @param int $apiKeys apiKeys
     *
     * @return $this
     */
    public function setApiKeys($apiKeys)
    {
        $this->container['apiKeys'] = $apiKeys;

        return $this;
    }

    /**
     * Gets apiTokens
     *
     * @return int
     */
    public function getApiTokens()
    {
        return $this->container['apiTokens'];
    }

    /**
     * Sets apiTokens
     *
     * @param int $apiTokens apiTokens
     *
     * @return $this
     */
    public function setApiTokens($apiTokens)
    {
        $this->container['apiTokens'] = $apiTokens;

        return $this;
    }

    /**
     * Gets sshKeys
     *
     * @return int
     */
    public function getSshKeys()
    {
        return $this->container['sshKeys'];
    }

    /**
     * Sets sshKeys
     *
     * @param int $sshKeys sshKeys
     *
     * @return $this
     */
    public function setSshKeys($sshKeys)
    {
        $this->container['sshKeys'] = $sshKeys;

        return $this;
    }

    /**
     * Gets directLinks
     *
     * @return bool
     */
    public function getDirectLinks()
    {
        return $this->container['directLinks'];
    }

    /**
     * Sets directLinks
     *
     * @param bool $directLinks directLinks
     *
     * @return $this
     */
    public function setDirectLinks($directLinks)
    {
        $this->container['directLinks'] = $directLinks;

        return $this;
    }

    /**
     * Gets sharingOptions
     *
     * @return string[]
     */
    public function getSharingOptions()
    {
        return $this->container['sharingOptions'];
    }

    /**
     * Sets sharingOptions
     *
     * @param string[] $sharingOptions sharingOptions
     *
     * @return $this
     */
    public function setSharingOptions($sharingOptions)
    {
        $this->container['sharingOptions'] = $sharingOptions;

        return $this;
    }

    /**
     * Gets webhookOptions
     *
     * @return \ExaVault\Model\PlanDetailsWebhookOptions
     */
    public function getWebhookOptions()
    {
        return $this->container['webhookOptions'];
    }

    /**
     * Sets webhookOptions
     *
     * @param \ExaVault\Model\PlanDetailsWebhookOptions $webhookOptions webhookOptions
     *
     * @return $this
     */
    public function setWebhookOptions($webhookOptions)
    {
        $this->container['webhookOptions'] = $webhookOptions;

        return $this;
    }

    /**
     * Gets unlimitedUsers
     *
     * @return bool
     */
    public function getUnlimitedUsers()
    {
        return $this->container['unlimitedUsers'];
    }

    /**
     * Sets unlimitedUsers
     *
     * @param bool $unlimitedUsers unlimitedUsers
     *
     * @return $this
     */
    public function setUnlimitedUsers($unlimitedUsers)
    {
        $this->container['unlimitedUsers'] = $unlimitedUsers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
