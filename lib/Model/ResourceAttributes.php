<?php
/**
 * ResourceAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ResourceAttributes Class Doc Comment
 *
 * @category Class
 * @description Attributes of resource
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResourceAttributes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResourceAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hash' => 'string',
'name' => 'string',
'extension' => 'string',
'type' => 'string',
'created_by' => 'string',
'upload_date' => '\DateTime',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'accessed_at' => '\DateTime',
'created_time' => 'int',
'updated_time' => 'int',
'accessed_time' => 'int',
'path' => 'string',
'size' => 'int',
'file_count' => 'int',
'previewable' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hash' => null,
'name' => null,
'extension' => null,
'type' => null,
'created_by' => null,
'upload_date' => 'date-time',
'created_at' => 'date-time',
'updated_at' => 'date-time',
'accessed_at' => 'date-time',
'created_time' => 'int32',
'updated_time' => 'int32',
'accessed_time' => 'int32',
'path' => null,
'size' => 'int64',
'file_count' => null,
'previewable' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hash' => 'hash',
'name' => 'name',
'extension' => 'extension',
'type' => 'type',
'created_by' => 'createdBy',
'upload_date' => 'uploadDate',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'accessed_at' => 'accessedAt',
'created_time' => 'createdTime',
'updated_time' => 'updatedTime',
'accessed_time' => 'accessedTime',
'path' => 'path',
'size' => 'size',
'file_count' => 'fileCount',
'previewable' => 'previewable'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hash' => 'setHash',
'name' => 'setName',
'extension' => 'setExtension',
'type' => 'setType',
'created_by' => 'setCreatedBy',
'upload_date' => 'setUploadDate',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'accessed_at' => 'setAccessedAt',
'created_time' => 'setCreatedTime',
'updated_time' => 'setUpdatedTime',
'accessed_time' => 'setAccessedTime',
'path' => 'setPath',
'size' => 'setSize',
'file_count' => 'setFileCount',
'previewable' => 'setPreviewable'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hash' => 'getHash',
'name' => 'getName',
'extension' => 'getExtension',
'type' => 'getType',
'created_by' => 'getCreatedBy',
'upload_date' => 'getUploadDate',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'accessed_at' => 'getAccessedAt',
'created_time' => 'getCreatedTime',
'updated_time' => 'getUpdatedTime',
'accessed_time' => 'getAccessedTime',
'path' => 'getPath',
'size' => 'getSize',
'file_count' => 'getFileCount',
'previewable' => 'getPreviewable'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_FILE = 'file';
const TYPE_DIR = 'dir';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FILE,
self::TYPE_DIR,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['extension'] = isset($data['extension']) ? $data['extension'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['upload_date'] = isset($data['upload_date']) ? $data['upload_date'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['accessed_at'] = isset($data['accessed_at']) ? $data['accessed_at'] : null;
        $this->container['created_time'] = isset($data['created_time']) ? $data['created_time'] : null;
        $this->container['updated_time'] = isset($data['updated_time']) ? $data['updated_time'] : null;
        $this->container['accessed_time'] = isset($data['accessed_time']) ? $data['accessed_time'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['file_count'] = isset($data['file_count']) ? $data['file_count'] : null;
        $this->container['previewable'] = isset($data['previewable']) ? $data['previewable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string $hash Unique hash of the resource.
     *
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Resource name, e.g. the name of the file or folder.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets extension
     *
     * @return string
     */
    public function getExtension()
    {
        return $this->container['extension'];
    }

    /**
     * Sets extension
     *
     * @param string $extension Resource extension. Property exists only if resource `type` is file.
     *
     * @return $this
     */
    public function setExtension($extension)
    {
        $this->container['extension'] = $extension;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of the resource.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by Username of the creator.
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets upload_date
     *
     * @return \DateTime
     */
    public function getUploadDate()
    {
        return $this->container['upload_date'];
    }

    /**
     * Sets upload_date
     *
     * @param \DateTime $upload_date Timestamp of resource upload.
     *
     * @return $this
     */
    public function setUploadDate($upload_date)
    {
        $this->container['upload_date'] = $upload_date;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Date-time of resource creation.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Date-time of resource modification.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets accessed_at
     *
     * @return \DateTime
     */
    public function getAccessedAt()
    {
        return $this->container['accessed_at'];
    }

    /**
     * Sets accessed_at
     *
     * @param \DateTime $accessed_at Date-time of the time when resource was accessed.
     *
     * @return $this
     */
    public function setAccessedAt($accessed_at)
    {
        $this->container['accessed_at'] = $accessed_at;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return int
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param int $created_time UNIX timestamp of resource creation
     *
     * @return $this
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return int
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param int $updated_time UNIX timestamp of resource modification
     *
     * @return $this
     */
    public function setUpdatedTime($updated_time)
    {
        $this->container['updated_time'] = $updated_time;

        return $this;
    }

    /**
     * Gets accessed_time
     *
     * @return int
     */
    public function getAccessedTime()
    {
        return $this->container['accessed_time'];
    }

    /**
     * Sets accessed_time
     *
     * @param int $accessed_time UNIX timestamp of last access
     *
     * @return $this
     */
    public function setAccessedTime($accessed_time)
    {
        $this->container['accessed_time'] = $accessed_time;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path Full path to the resource.
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size Resource size in bytes
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets file_count
     *
     * @return int
     */
    public function getFileCount()
    {
        return $this->container['file_count'];
    }

    /**
     * Sets file_count
     *
     * @param int $file_count Number of files within folder. null if resource type is a file.
     *
     * @return $this
     */
    public function setFileCount($file_count)
    {
        $this->container['file_count'] = $file_count;

        return $this;
    }

    /**
     * Gets previewable
     *
     * @return bool
     */
    public function getPreviewable()
    {
        return $this->container['previewable'];
    }

    /**
     * Sets previewable
     *
     * @param bool $previewable Can resource be previewed. Property equals `null` if resource `type` is dir.
     *
     * @return $this
     */
    public function setPreviewable($previewable)
    {
        $this->container['previewable'] = $previewable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
