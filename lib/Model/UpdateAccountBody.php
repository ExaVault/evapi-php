<?php
/**
 * UpdateAccountBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ExaVault\Model;

use \ArrayAccess;
use \ExaVault\ObjectSerializer;

/**
 * UpdateAccountBody Class Doc Comment
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateAccountBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateAccountBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'quota_notice_enabled' => 'bool',
'quota_notice_threshold' => 'int',
'secure_only' => 'bool',
'complex_passwords' => 'bool',
'show_referral_links' => 'bool',
'external_domain' => 'string',
'email_content' => 'string',
'email_subject' => 'string',
'allowed_ip_ranges' => '\ExaVault\Model\AccountAllowedIpRanges[]',
'callback_settings' => '\ExaVault\Model\CallbackSettings1',
'branding_settings' => '\ExaVault\Model\BrandingSettings1',
'account_onboarding' => 'bool',
'custom_signature' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'quota_notice_enabled' => null,
'quota_notice_threshold' => null,
'secure_only' => null,
'complex_passwords' => null,
'show_referral_links' => null,
'external_domain' => null,
'email_content' => null,
'email_subject' => null,
'allowed_ip_ranges' => null,
'callback_settings' => null,
'branding_settings' => null,
'account_onboarding' => null,
'custom_signature' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'quota_notice_enabled' => 'quotaNoticeEnabled',
'quota_notice_threshold' => 'quotaNoticeThreshold',
'secure_only' => 'secureOnly',
'complex_passwords' => 'complexPasswords',
'show_referral_links' => 'showReferralLinks',
'external_domain' => 'externalDomain',
'email_content' => 'emailContent',
'email_subject' => 'emailSubject',
'allowed_ip_ranges' => 'allowedIpRanges',
'callback_settings' => 'callbackSettings',
'branding_settings' => 'brandingSettings',
'account_onboarding' => 'accountOnboarding',
'custom_signature' => 'customSignature'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'quota_notice_enabled' => 'setQuotaNoticeEnabled',
'quota_notice_threshold' => 'setQuotaNoticeThreshold',
'secure_only' => 'setSecureOnly',
'complex_passwords' => 'setComplexPasswords',
'show_referral_links' => 'setShowReferralLinks',
'external_domain' => 'setExternalDomain',
'email_content' => 'setEmailContent',
'email_subject' => 'setEmailSubject',
'allowed_ip_ranges' => 'setAllowedIpRanges',
'callback_settings' => 'setCallbackSettings',
'branding_settings' => 'setBrandingSettings',
'account_onboarding' => 'setAccountOnboarding',
'custom_signature' => 'setCustomSignature'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'quota_notice_enabled' => 'getQuotaNoticeEnabled',
'quota_notice_threshold' => 'getQuotaNoticeThreshold',
'secure_only' => 'getSecureOnly',
'complex_passwords' => 'getComplexPasswords',
'show_referral_links' => 'getShowReferralLinks',
'external_domain' => 'getExternalDomain',
'email_content' => 'getEmailContent',
'email_subject' => 'getEmailSubject',
'allowed_ip_ranges' => 'getAllowedIpRanges',
'callback_settings' => 'getCallbackSettings',
'branding_settings' => 'getBrandingSettings',
'account_onboarding' => 'getAccountOnboarding',
'custom_signature' => 'getCustomSignature'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['quota_notice_enabled'] = isset($data['quota_notice_enabled']) ? $data['quota_notice_enabled'] : null;
        $this->container['quota_notice_threshold'] = isset($data['quota_notice_threshold']) ? $data['quota_notice_threshold'] : null;
        $this->container['secure_only'] = isset($data['secure_only']) ? $data['secure_only'] : null;
        $this->container['complex_passwords'] = isset($data['complex_passwords']) ? $data['complex_passwords'] : null;
        $this->container['show_referral_links'] = isset($data['show_referral_links']) ? $data['show_referral_links'] : null;
        $this->container['external_domain'] = isset($data['external_domain']) ? $data['external_domain'] : null;
        $this->container['email_content'] = isset($data['email_content']) ? $data['email_content'] : null;
        $this->container['email_subject'] = isset($data['email_subject']) ? $data['email_subject'] : null;
        $this->container['allowed_ip_ranges'] = isset($data['allowed_ip_ranges']) ? $data['allowed_ip_ranges'] : null;
        $this->container['callback_settings'] = isset($data['callback_settings']) ? $data['callback_settings'] : null;
        $this->container['branding_settings'] = isset($data['branding_settings']) ? $data['branding_settings'] : null;
        $this->container['account_onboarding'] = isset($data['account_onboarding']) ? $data['account_onboarding'] : null;
        $this->container['custom_signature'] = isset($data['custom_signature']) ? $data['custom_signature'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets quota_notice_enabled
     *
     * @return bool
     */
    public function getQuotaNoticeEnabled()
    {
        return $this->container['quota_notice_enabled'];
    }

    /**
     * Sets quota_notice_enabled
     *
     * @param bool $quota_notice_enabled Whether the system should email the account owner when usage exceeds quotaNoticeThreshold value
     *
     * @return $this
     */
    public function setQuotaNoticeEnabled($quota_notice_enabled)
    {
        $this->container['quota_notice_enabled'] = $quota_notice_enabled;

        return $this;
    }

    /**
     * Gets quota_notice_threshold
     *
     * @return int
     */
    public function getQuotaNoticeThreshold()
    {
        return $this->container['quota_notice_threshold'];
    }

    /**
     * Sets quota_notice_threshold
     *
     * @param int $quota_notice_threshold Percent of account usage to trigger quota notices for.
     *
     * @return $this
     */
    public function setQuotaNoticeThreshold($quota_notice_threshold)
    {
        $this->container['quota_notice_threshold'] = $quota_notice_threshold;

        return $this;
    }

    /**
     * Gets secure_only
     *
     * @return bool
     */
    public function getSecureOnly()
    {
        return $this->container['secure_only'];
    }

    /**
     * Sets secure_only
     *
     * @param bool $secure_only Whether unencrypted FTP connections should be denied for the account.
     *
     * @return $this
     */
    public function setSecureOnly($secure_only)
    {
        $this->container['secure_only'] = $secure_only;

        return $this;
    }

    /**
     * Gets complex_passwords
     *
     * @return bool
     */
    public function getComplexPasswords()
    {
        return $this->container['complex_passwords'];
    }

    /**
     * Sets complex_passwords
     *
     * @param bool $complex_passwords Whether to require complex passwords for all passwords.
     *
     * @return $this
     */
    public function setComplexPasswords($complex_passwords)
    {
        $this->container['complex_passwords'] = $complex_passwords;

        return $this;
    }

    /**
     * Gets show_referral_links
     *
     * @return bool
     */
    public function getShowReferralLinks()
    {
        return $this->container['show_referral_links'];
    }

    /**
     * Sets show_referral_links
     *
     * @param bool $show_referral_links Whether to display links for others to sign up on share views and invitation emails
     *
     * @return $this
     */
    public function setShowReferralLinks($show_referral_links)
    {
        $this->container['show_referral_links'] = $show_referral_links;

        return $this;
    }

    /**
     * Gets external_domain
     *
     * @return string
     */
    public function getExternalDomain()
    {
        return $this->container['external_domain'];
    }

    /**
     * Sets external_domain
     *
     * @param string $external_domain Custom address used for web file manager. Not available for all account types.
     *
     * @return $this
     */
    public function setExternalDomain($external_domain)
    {
        $this->container['external_domain'] = $external_domain;

        return $this;
    }

    /**
     * Gets email_content
     *
     * @return string
     */
    public function getEmailContent()
    {
        return $this->container['email_content'];
    }

    /**
     * Sets email_content
     *
     * @param string $email_content Content of welcome email template.
     *
     * @return $this
     */
    public function setEmailContent($email_content)
    {
        $this->container['email_content'] = $email_content;

        return $this;
    }

    /**
     * Gets email_subject
     *
     * @return string
     */
    public function getEmailSubject()
    {
        return $this->container['email_subject'];
    }

    /**
     * Sets email_subject
     *
     * @param string $email_subject Subject line for welcome emails
     *
     * @return $this
     */
    public function setEmailSubject($email_subject)
    {
        $this->container['email_subject'] = $email_subject;

        return $this;
    }

    /**
     * Gets allowed_ip_ranges
     *
     * @return \ExaVault\Model\AccountAllowedIpRanges[]
     */
    public function getAllowedIpRanges()
    {
        return $this->container['allowed_ip_ranges'];
    }

    /**
     * Sets allowed_ip_ranges
     *
     * @param \ExaVault\Model\AccountAllowedIpRanges[] $allowed_ip_ranges IP Address Ranges for restricting account access
     *
     * @return $this
     */
    public function setAllowedIpRanges($allowed_ip_ranges)
    {
        $this->container['allowed_ip_ranges'] = $allowed_ip_ranges;

        return $this;
    }

    /**
     * Gets callback_settings
     *
     * @return \ExaVault\Model\CallbackSettings1
     */
    public function getCallbackSettings()
    {
        return $this->container['callback_settings'];
    }

    /**
     * Sets callback_settings
     *
     * @param \ExaVault\Model\CallbackSettings1 $callback_settings callback_settings
     *
     * @return $this
     */
    public function setCallbackSettings($callback_settings)
    {
        $this->container['callback_settings'] = $callback_settings;

        return $this;
    }

    /**
     * Gets branding_settings
     *
     * @return \ExaVault\Model\BrandingSettings1
     */
    public function getBrandingSettings()
    {
        return $this->container['branding_settings'];
    }

    /**
     * Sets branding_settings
     *
     * @param \ExaVault\Model\BrandingSettings1 $branding_settings branding_settings
     *
     * @return $this
     */
    public function setBrandingSettings($branding_settings)
    {
        $this->container['branding_settings'] = $branding_settings;

        return $this;
    }

    /**
     * Gets account_onboarding
     *
     * @return bool
     */
    public function getAccountOnboarding()
    {
        return $this->container['account_onboarding'];
    }

    /**
     * Sets account_onboarding
     *
     * @param bool $account_onboarding Whether extra help popups can be enabled for users in the web file manager.
     *
     * @return $this
     */
    public function setAccountOnboarding($account_onboarding)
    {
        $this->container['account_onboarding'] = $account_onboarding;

        return $this;
    }

    /**
     * Gets custom_signature
     *
     * @return string
     */
    public function getCustomSignature()
    {
        return $this->container['custom_signature'];
    }

    /**
     * Sets custom_signature
     *
     * @param string $custom_signature Signature to be automatically added to the bottom of emails generated by the account.
     *
     * @return $this
     */
    public function setCustomSignature($custom_signature)
    {
        $this->container['custom_signature'] = $custom_signature;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
