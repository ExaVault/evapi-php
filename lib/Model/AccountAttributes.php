<?php
/**
 * AccountAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ExaVault\Model;

use \ArrayAccess;
use \ExaVault\ObjectSerializer;

/**
 * AccountAttributes Class Doc Comment
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountAttributes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accountName' => 'string',
'maxUsers' => 'int',
'userCount' => 'int',
'status' => 'int',
'branding' => 'bool',
'customDomain' => 'bool',
'quota' => '\ExaVault\Model\Quota',
'secureOnly' => 'bool',
'complexPasswords' => 'bool',
'showReferralLinks' => 'bool',
'externalDomains' => 'string[]',
'allowedIp' => '\ExaVault\Model\AccountAttributesAllowedIp[]',
'brandingSettings' => '\ExaVault\Model\BrandingSettings',
'planDetails' => '\ExaVault\Model\PlanDetails',
'clientId' => 'int',
'welcomeEmailContent' => 'string',
'welcomeEmailSubject' => 'string',
'customSignature' => 'string',
'accountOnboarding' => 'bool',
'created' => '\DateTime',
'modified' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accountName' => null,
'maxUsers' => 'int32',
'userCount' => 'int32',
'status' => 'int32',
'branding' => null,
'customDomain' => null,
'quota' => null,
'secureOnly' => null,
'complexPasswords' => null,
'showReferralLinks' => null,
'externalDomains' => null,
'allowedIp' => null,
'brandingSettings' => null,
'planDetails' => null,
'clientId' => 'int32',
'welcomeEmailContent' => null,
'welcomeEmailSubject' => null,
'customSignature' => null,
'accountOnboarding' => null,
'created' => 'date-time',
'modified' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountName' => 'accountName',
'maxUsers' => 'maxUsers',
'userCount' => 'userCount',
'status' => 'status',
'branding' => 'branding',
'customDomain' => 'customDomain',
'quota' => 'quota',
'secureOnly' => 'secureOnly',
'complexPasswords' => 'complexPasswords',
'showReferralLinks' => 'showReferralLinks',
'externalDomains' => 'externalDomains',
'allowedIp' => 'allowedIp',
'brandingSettings' => 'brandingSettings',
'planDetails' => 'planDetails',
'clientId' => 'clientId',
'welcomeEmailContent' => 'welcomeEmailContent',
'welcomeEmailSubject' => 'welcomeEmailSubject',
'customSignature' => 'customSignature',
'accountOnboarding' => 'accountOnboarding',
'created' => 'created',
'modified' => 'modified'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountName' => 'setAccountName',
'maxUsers' => 'setMaxUsers',
'userCount' => 'setUserCount',
'status' => 'setStatus',
'branding' => 'setBranding',
'customDomain' => 'setCustomDomain',
'quota' => 'setQuota',
'secureOnly' => 'setSecureOnly',
'complexPasswords' => 'setComplexPasswords',
'showReferralLinks' => 'setShowReferralLinks',
'externalDomains' => 'setExternalDomains',
'allowedIp' => 'setAllowedIp',
'brandingSettings' => 'setBrandingSettings',
'planDetails' => 'setPlanDetails',
'clientId' => 'setClientId',
'welcomeEmailContent' => 'setWelcomeEmailContent',
'welcomeEmailSubject' => 'setWelcomeEmailSubject',
'customSignature' => 'setCustomSignature',
'accountOnboarding' => 'setAccountOnboarding',
'created' => 'setCreated',
'modified' => 'setModified'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountName' => 'getAccountName',
'maxUsers' => 'getMaxUsers',
'userCount' => 'getUserCount',
'status' => 'getStatus',
'branding' => 'getBranding',
'customDomain' => 'getCustomDomain',
'quota' => 'getQuota',
'secureOnly' => 'getSecureOnly',
'complexPasswords' => 'getComplexPasswords',
'showReferralLinks' => 'getShowReferralLinks',
'externalDomains' => 'getExternalDomains',
'allowedIp' => 'getAllowedIp',
'brandingSettings' => 'getBrandingSettings',
'planDetails' => 'getPlanDetails',
'clientId' => 'getClientId',
'welcomeEmailContent' => 'getWelcomeEmailContent',
'welcomeEmailSubject' => 'getWelcomeEmailSubject',
'customSignature' => 'getCustomSignature',
'accountOnboarding' => 'getAccountOnboarding',
'created' => 'getCreated',
'modified' => 'getModified'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_1 = 1;
const STATUS_0 = 0;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_1,
self::STATUS_0,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountName'] = isset($data['accountName']) ? $data['accountName'] : null;
        $this->container['maxUsers'] = isset($data['maxUsers']) ? $data['maxUsers'] : null;
        $this->container['userCount'] = isset($data['userCount']) ? $data['userCount'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['branding'] = isset($data['branding']) ? $data['branding'] : null;
        $this->container['customDomain'] = isset($data['customDomain']) ? $data['customDomain'] : null;
        $this->container['quota'] = isset($data['quota']) ? $data['quota'] : null;
        $this->container['secureOnly'] = isset($data['secureOnly']) ? $data['secureOnly'] : null;
        $this->container['complexPasswords'] = isset($data['complexPasswords']) ? $data['complexPasswords'] : null;
        $this->container['showReferralLinks'] = isset($data['showReferralLinks']) ? $data['showReferralLinks'] : null;
        $this->container['externalDomains'] = isset($data['externalDomains']) ? $data['externalDomains'] : null;
        $this->container['allowedIp'] = isset($data['allowedIp']) ? $data['allowedIp'] : null;
        $this->container['brandingSettings'] = isset($data['brandingSettings']) ? $data['brandingSettings'] : null;
        $this->container['planDetails'] = isset($data['planDetails']) ? $data['planDetails'] : null;
        $this->container['clientId'] = isset($data['clientId']) ? $data['clientId'] : null;
        $this->container['welcomeEmailContent'] = isset($data['welcomeEmailContent']) ? $data['welcomeEmailContent'] : null;
        $this->container['welcomeEmailSubject'] = isset($data['welcomeEmailSubject']) ? $data['welcomeEmailSubject'] : null;
        $this->container['customSignature'] = isset($data['customSignature']) ? $data['customSignature'] : null;
        $this->container['accountOnboarding'] = isset($data['accountOnboarding']) ? $data['accountOnboarding'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountName
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['accountName'];
    }

    /**
     * Sets accountName
     *
     * @param string $accountName Name of the account
     *
     * @return $this
     */
    public function setAccountName($accountName)
    {
        $this->container['accountName'] = $accountName;

        return $this;
    }

    /**
     * Gets maxUsers
     *
     * @return int
     */
    public function getMaxUsers()
    {
        return $this->container['maxUsers'];
    }

    /**
     * Sets maxUsers
     *
     * @param int $maxUsers Maximum number of users the account can have. This can be increased by contacting ExaVault Support.
     *
     * @return $this
     */
    public function setMaxUsers($maxUsers)
    {
        $this->container['maxUsers'] = $maxUsers;

        return $this;
    }

    /**
     * Gets userCount
     *
     * @return int
     */
    public function getUserCount()
    {
        return $this->container['userCount'];
    }

    /**
     * Sets userCount
     *
     * @param int $userCount Current number of users on the account.
     *
     * @return $this
     */
    public function setUserCount($userCount)
    {
        $this->container['userCount'] = $userCount;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status Account status flag. A one (1) means the account is active; zero (0) means it is suspended.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets branding
     *
     * @return bool
     */
    public function getBranding()
    {
        return $this->container['branding'];
    }

    /**
     * Sets branding
     *
     * @param bool $branding Branding flag. Set to `true` if the account has branding functionality enabled.
     *
     * @return $this
     */
    public function setBranding($branding)
    {
        $this->container['branding'] = $branding;

        return $this;
    }

    /**
     * Gets customDomain
     *
     * @return bool
     */
    public function getCustomDomain()
    {
        return $this->container['customDomain'];
    }

    /**
     * Sets customDomain
     *
     * @param bool $customDomain Custom domain flag. Set to `true` if account type allows custom domain functionality.
     *
     * @return $this
     */
    public function setCustomDomain($customDomain)
    {
        $this->container['customDomain'] = $customDomain;

        return $this;
    }

    /**
     * Gets quota
     *
     * @return \ExaVault\Model\Quota
     */
    public function getQuota()
    {
        return $this->container['quota'];
    }

    /**
     * Sets quota
     *
     * @param \ExaVault\Model\Quota $quota quota
     *
     * @return $this
     */
    public function setQuota($quota)
    {
        $this->container['quota'] = $quota;

        return $this;
    }

    /**
     * Gets secureOnly
     *
     * @return bool
     */
    public function getSecureOnly()
    {
        return $this->container['secureOnly'];
    }

    /**
     * Sets secureOnly
     *
     * @param bool $secureOnly Flag to indicate whether the account disables connections via insecure protocols (e.g. FTP). Set to `true` to disable all traffic over port 21.
     *
     * @return $this
     */
    public function setSecureOnly($secureOnly)
    {
        $this->container['secureOnly'] = $secureOnly;

        return $this;
    }

    /**
     * Gets complexPasswords
     *
     * @return bool
     */
    public function getComplexPasswords()
    {
        return $this->container['complexPasswords'];
    }

    /**
     * Sets complexPasswords
     *
     * @param bool $complexPasswords Flag to indicate whether the account requires complex passwords. Set to `true` to require complex passwords on all users and shares.
     *
     * @return $this
     */
    public function setComplexPasswords($complexPasswords)
    {
        $this->container['complexPasswords'] = $complexPasswords;

        return $this;
    }

    /**
     * Gets showReferralLinks
     *
     * @return bool
     */
    public function getShowReferralLinks()
    {
        return $this->container['showReferralLinks'];
    }

    /**
     * Sets showReferralLinks
     *
     * @param bool $showReferralLinks Flag to indicate showing of referrals links in the account. Set to `true` to include marketing messages in share invitations.
     *
     * @return $this
     */
    public function setShowReferralLinks($showReferralLinks)
    {
        $this->container['showReferralLinks'] = $showReferralLinks;

        return $this;
    }

    /**
     * Gets externalDomains
     *
     * @return string[]
     */
    public function getExternalDomains()
    {
        return $this->container['externalDomains'];
    }

    /**
     * Sets externalDomains
     *
     * @param string[] $externalDomains Custom domain used to brand this account.
     *
     * @return $this
     */
    public function setExternalDomains($externalDomains)
    {
        $this->container['externalDomains'] = $externalDomains;

        return $this;
    }

    /**
     * Gets allowedIp
     *
     * @return \ExaVault\Model\AccountAttributesAllowedIp[]
     */
    public function getAllowedIp()
    {
        return $this->container['allowedIp'];
    }

    /**
     * Sets allowedIp
     *
     * @param \ExaVault\Model\AccountAttributesAllowedIp[] $allowedIp Range of IP addresses allowed to access this account.
     *
     * @return $this
     */
    public function setAllowedIp($allowedIp)
    {
        $this->container['allowedIp'] = $allowedIp;

        return $this;
    }

    /**
     * Gets brandingSettings
     *
     * @return \ExaVault\Model\BrandingSettings
     */
    public function getBrandingSettings()
    {
        return $this->container['brandingSettings'];
    }

    /**
     * Sets brandingSettings
     *
     * @param \ExaVault\Model\BrandingSettings $brandingSettings brandingSettings
     *
     * @return $this
     */
    public function setBrandingSettings($brandingSettings)
    {
        $this->container['brandingSettings'] = $brandingSettings;

        return $this;
    }

    /**
     * Gets planDetails
     *
     * @return \ExaVault\Model\PlanDetails
     */
    public function getPlanDetails()
    {
        return $this->container['planDetails'];
    }

    /**
     * Sets planDetails
     *
     * @param \ExaVault\Model\PlanDetails $planDetails planDetails
     *
     * @return $this
     */
    public function setPlanDetails($planDetails)
    {
        $this->container['planDetails'] = $planDetails;

        return $this;
    }

    /**
     * Gets clientId
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['clientId'];
    }

    /**
     * Sets clientId
     *
     * @param int $clientId (ExaVault Use Only) Internal ID of the account in CMS.
     *
     * @return $this
     */
    public function setClientId($clientId)
    {
        $this->container['clientId'] = $clientId;

        return $this;
    }

    /**
     * Gets welcomeEmailContent
     *
     * @return string
     */
    public function getWelcomeEmailContent()
    {
        return $this->container['welcomeEmailContent'];
    }

    /**
     * Sets welcomeEmailContent
     *
     * @param string $welcomeEmailContent Content of welcome email each new user will receive.
     *
     * @return $this
     */
    public function setWelcomeEmailContent($welcomeEmailContent)
    {
        $this->container['welcomeEmailContent'] = $welcomeEmailContent;

        return $this;
    }

    /**
     * Gets welcomeEmailSubject
     *
     * @return string
     */
    public function getWelcomeEmailSubject()
    {
        return $this->container['welcomeEmailSubject'];
    }

    /**
     * Sets welcomeEmailSubject
     *
     * @param string $welcomeEmailSubject Subject of welcome email each new user will receive.
     *
     * @return $this
     */
    public function setWelcomeEmailSubject($welcomeEmailSubject)
    {
        $this->container['welcomeEmailSubject'] = $welcomeEmailSubject;

        return $this;
    }

    /**
     * Gets customSignature
     *
     * @return string
     */
    public function getCustomSignature()
    {
        return $this->container['customSignature'];
    }

    /**
     * Sets customSignature
     *
     * @param string $customSignature Custom signature for all account emails users or recipients will receive.
     *
     * @return $this
     */
    public function setCustomSignature($customSignature)
    {
        $this->container['customSignature'] = $customSignature;

        return $this;
    }

    /**
     * Gets accountOnboarding
     *
     * @return bool
     */
    public function getAccountOnboarding()
    {
        return $this->container['accountOnboarding'];
    }

    /**
     * Sets accountOnboarding
     *
     * @param bool $accountOnboarding Whether the web application onboarding help is enabled for new users in the account.
     *
     * @return $this
     */
    public function setAccountOnboarding($accountOnboarding)
    {
        $this->container['accountOnboarding'] = $accountOnboarding;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Timestamp of account creation.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified Timestamp of account modification.
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
