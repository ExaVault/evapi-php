<?php
/**
 * AccountAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ExaVault\Model;

use \ArrayAccess;
use \ExaVault\ObjectSerializer;

/**
 * AccountAttributes Class Doc Comment
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountAttributes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_name' => 'string',
'username' => 'string',
'max_users' => 'int',
'user_count' => 'int',
'status' => 'int',
'branding' => 'bool',
'custom_domain' => 'bool',
'quota' => '\ExaVault\Model\Quota',
'secure_only' => 'bool',
'complex_passwords' => 'bool',
'show_referral_links' => 'bool',
'external_domains' => 'string[]',
'allowed_ip' => '\ExaVault\Model\AccountAttributesAllowedIp[]',
'callback_settings' => '\ExaVault\Model\CallbackSettings',
'branding_settings' => '\ExaVault\Model\BrandingSettings',
'client_id' => 'int',
'welcome_email_content' => 'string',
'welcome_email_subject' => 'string',
'custom_signature' => 'string',
'account_onboarding' => 'bool',
'created' => '\DateTime',
'modified' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_name' => null,
'username' => null,
'max_users' => 'int32',
'user_count' => 'int32',
'status' => 'int32',
'branding' => null,
'custom_domain' => null,
'quota' => null,
'secure_only' => null,
'complex_passwords' => null,
'show_referral_links' => null,
'external_domains' => null,
'allowed_ip' => null,
'callback_settings' => null,
'branding_settings' => null,
'client_id' => 'int32',
'welcome_email_content' => null,
'welcome_email_subject' => null,
'custom_signature' => null,
'account_onboarding' => null,
'created' => 'date-time',
'modified' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_name' => 'accountName',
'username' => 'username',
'max_users' => 'maxUsers',
'user_count' => 'userCount',
'status' => 'status',
'branding' => 'branding',
'custom_domain' => 'customDomain',
'quota' => 'quota',
'secure_only' => 'secureOnly',
'complex_passwords' => 'complexPasswords',
'show_referral_links' => 'showReferralLinks',
'external_domains' => 'externalDomains',
'allowed_ip' => 'allowedIp',
'callback_settings' => 'callbackSettings',
'branding_settings' => 'brandingSettings',
'client_id' => 'clientId',
'welcome_email_content' => 'welcomeEmailContent',
'welcome_email_subject' => 'welcomeEmailSubject',
'custom_signature' => 'customSignature',
'account_onboarding' => 'accountOnboarding',
'created' => 'created',
'modified' => 'modified'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_name' => 'setAccountName',
'username' => 'setUsername',
'max_users' => 'setMaxUsers',
'user_count' => 'setUserCount',
'status' => 'setStatus',
'branding' => 'setBranding',
'custom_domain' => 'setCustomDomain',
'quota' => 'setQuota',
'secure_only' => 'setSecureOnly',
'complex_passwords' => 'setComplexPasswords',
'show_referral_links' => 'setShowReferralLinks',
'external_domains' => 'setExternalDomains',
'allowed_ip' => 'setAllowedIp',
'callback_settings' => 'setCallbackSettings',
'branding_settings' => 'setBrandingSettings',
'client_id' => 'setClientId',
'welcome_email_content' => 'setWelcomeEmailContent',
'welcome_email_subject' => 'setWelcomeEmailSubject',
'custom_signature' => 'setCustomSignature',
'account_onboarding' => 'setAccountOnboarding',
'created' => 'setCreated',
'modified' => 'setModified'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_name' => 'getAccountName',
'username' => 'getUsername',
'max_users' => 'getMaxUsers',
'user_count' => 'getUserCount',
'status' => 'getStatus',
'branding' => 'getBranding',
'custom_domain' => 'getCustomDomain',
'quota' => 'getQuota',
'secure_only' => 'getSecureOnly',
'complex_passwords' => 'getComplexPasswords',
'show_referral_links' => 'getShowReferralLinks',
'external_domains' => 'getExternalDomains',
'allowed_ip' => 'getAllowedIp',
'callback_settings' => 'getCallbackSettings',
'branding_settings' => 'getBrandingSettings',
'client_id' => 'getClientId',
'welcome_email_content' => 'getWelcomeEmailContent',
'welcome_email_subject' => 'getWelcomeEmailSubject',
'custom_signature' => 'getCustomSignature',
'account_onboarding' => 'getAccountOnboarding',
'created' => 'getCreated',
'modified' => 'getModified'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_1 = 1;
const STATUS_0 = 0;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_1,
self::STATUS_0,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['max_users'] = isset($data['max_users']) ? $data['max_users'] : null;
        $this->container['user_count'] = isset($data['user_count']) ? $data['user_count'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['branding'] = isset($data['branding']) ? $data['branding'] : null;
        $this->container['custom_domain'] = isset($data['custom_domain']) ? $data['custom_domain'] : null;
        $this->container['quota'] = isset($data['quota']) ? $data['quota'] : null;
        $this->container['secure_only'] = isset($data['secure_only']) ? $data['secure_only'] : null;
        $this->container['complex_passwords'] = isset($data['complex_passwords']) ? $data['complex_passwords'] : null;
        $this->container['show_referral_links'] = isset($data['show_referral_links']) ? $data['show_referral_links'] : null;
        $this->container['external_domains'] = isset($data['external_domains']) ? $data['external_domains'] : null;
        $this->container['allowed_ip'] = isset($data['allowed_ip']) ? $data['allowed_ip'] : null;
        $this->container['callback_settings'] = isset($data['callback_settings']) ? $data['callback_settings'] : null;
        $this->container['branding_settings'] = isset($data['branding_settings']) ? $data['branding_settings'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['welcome_email_content'] = isset($data['welcome_email_content']) ? $data['welcome_email_content'] : null;
        $this->container['welcome_email_subject'] = isset($data['welcome_email_subject']) ? $data['welcome_email_subject'] : null;
        $this->container['custom_signature'] = isset($data['custom_signature']) ? $data['custom_signature'] : null;
        $this->container['account_onboarding'] = isset($data['account_onboarding']) ? $data['account_onboarding'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name Name of the account
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username Name of account's master user
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets max_users
     *
     * @return int
     */
    public function getMaxUsers()
    {
        return $this->container['max_users'];
    }

    /**
     * Sets max_users
     *
     * @param int $max_users Maximum number of users the account can have. This can be increased by contacting ExaVault Support.
     *
     * @return $this
     */
    public function setMaxUsers($max_users)
    {
        $this->container['max_users'] = $max_users;

        return $this;
    }

    /**
     * Gets user_count
     *
     * @return int
     */
    public function getUserCount()
    {
        return $this->container['user_count'];
    }

    /**
     * Sets user_count
     *
     * @param int $user_count Current number of users on the account.
     *
     * @return $this
     */
    public function setUserCount($user_count)
    {
        $this->container['user_count'] = $user_count;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status Account status flag. A one (1) means the account is active; zero (0) means it is suspended.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets branding
     *
     * @return bool
     */
    public function getBranding()
    {
        return $this->container['branding'];
    }

    /**
     * Sets branding
     *
     * @param bool $branding Branding flag. Set to `true` if the account has branding functionality enabled.
     *
     * @return $this
     */
    public function setBranding($branding)
    {
        $this->container['branding'] = $branding;

        return $this;
    }

    /**
     * Gets custom_domain
     *
     * @return bool
     */
    public function getCustomDomain()
    {
        return $this->container['custom_domain'];
    }

    /**
     * Sets custom_domain
     *
     * @param bool $custom_domain Custom domain flag. Set to `true` if account type allows custom domain functionality.
     *
     * @return $this
     */
    public function setCustomDomain($custom_domain)
    {
        $this->container['custom_domain'] = $custom_domain;

        return $this;
    }

    /**
     * Gets quota
     *
     * @return \ExaVault\Model\Quota
     */
    public function getQuota()
    {
        return $this->container['quota'];
    }

    /**
     * Sets quota
     *
     * @param \ExaVault\Model\Quota $quota quota
     *
     * @return $this
     */
    public function setQuota($quota)
    {
        $this->container['quota'] = $quota;

        return $this;
    }

    /**
     * Gets secure_only
     *
     * @return bool
     */
    public function getSecureOnly()
    {
        return $this->container['secure_only'];
    }

    /**
     * Sets secure_only
     *
     * @param bool $secure_only Flag to indicate whether the account disables connections via insecure protocols (e.g. FTP). Set to `true` to disable all traffic over port 21.
     *
     * @return $this
     */
    public function setSecureOnly($secure_only)
    {
        $this->container['secure_only'] = $secure_only;

        return $this;
    }

    /**
     * Gets complex_passwords
     *
     * @return bool
     */
    public function getComplexPasswords()
    {
        return $this->container['complex_passwords'];
    }

    /**
     * Sets complex_passwords
     *
     * @param bool $complex_passwords Flag to indicate whether the account requires complex passwords. Set to `true` to require complex passwords on all users and shares.
     *
     * @return $this
     */
    public function setComplexPasswords($complex_passwords)
    {
        $this->container['complex_passwords'] = $complex_passwords;

        return $this;
    }

    /**
     * Gets show_referral_links
     *
     * @return bool
     */
    public function getShowReferralLinks()
    {
        return $this->container['show_referral_links'];
    }

    /**
     * Sets show_referral_links
     *
     * @param bool $show_referral_links Flag to indicate showing of referrals links in the account. Set to `true` to include marketing messages in share invitations.
     *
     * @return $this
     */
    public function setShowReferralLinks($show_referral_links)
    {
        $this->container['show_referral_links'] = $show_referral_links;

        return $this;
    }

    /**
     * Gets external_domains
     *
     * @return string[]
     */
    public function getExternalDomains()
    {
        return $this->container['external_domains'];
    }

    /**
     * Sets external_domains
     *
     * @param string[] $external_domains Custom domain used to brand this account.
     *
     * @return $this
     */
    public function setExternalDomains($external_domains)
    {
        $this->container['external_domains'] = $external_domains;

        return $this;
    }

    /**
     * Gets allowed_ip
     *
     * @return \ExaVault\Model\AccountAttributesAllowedIp[]
     */
    public function getAllowedIp()
    {
        return $this->container['allowed_ip'];
    }

    /**
     * Sets allowed_ip
     *
     * @param \ExaVault\Model\AccountAttributesAllowedIp[] $allowed_ip Range of IP addresses allowed to access this account.
     *
     * @return $this
     */
    public function setAllowedIp($allowed_ip)
    {
        $this->container['allowed_ip'] = $allowed_ip;

        return $this;
    }

    /**
     * Gets callback_settings
     *
     * @return \ExaVault\Model\CallbackSettings
     */
    public function getCallbackSettings()
    {
        return $this->container['callback_settings'];
    }

    /**
     * Sets callback_settings
     *
     * @param \ExaVault\Model\CallbackSettings $callback_settings callback_settings
     *
     * @return $this
     */
    public function setCallbackSettings($callback_settings)
    {
        $this->container['callback_settings'] = $callback_settings;

        return $this;
    }

    /**
     * Gets branding_settings
     *
     * @return \ExaVault\Model\BrandingSettings
     */
    public function getBrandingSettings()
    {
        return $this->container['branding_settings'];
    }

    /**
     * Sets branding_settings
     *
     * @param \ExaVault\Model\BrandingSettings $branding_settings branding_settings
     *
     * @return $this
     */
    public function setBrandingSettings($branding_settings)
    {
        $this->container['branding_settings'] = $branding_settings;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int $client_id (ExaVault Use Only) Internal ID of the account in CMS.
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets welcome_email_content
     *
     * @return string
     */
    public function getWelcomeEmailContent()
    {
        return $this->container['welcome_email_content'];
    }

    /**
     * Sets welcome_email_content
     *
     * @param string $welcome_email_content Content of welcome email each new user will receive.
     *
     * @return $this
     */
    public function setWelcomeEmailContent($welcome_email_content)
    {
        $this->container['welcome_email_content'] = $welcome_email_content;

        return $this;
    }

    /**
     * Gets welcome_email_subject
     *
     * @return string
     */
    public function getWelcomeEmailSubject()
    {
        return $this->container['welcome_email_subject'];
    }

    /**
     * Sets welcome_email_subject
     *
     * @param string $welcome_email_subject Subject of welcome email each new user will receive.
     *
     * @return $this
     */
    public function setWelcomeEmailSubject($welcome_email_subject)
    {
        $this->container['welcome_email_subject'] = $welcome_email_subject;

        return $this;
    }

    /**
     * Gets custom_signature
     *
     * @return string
     */
    public function getCustomSignature()
    {
        return $this->container['custom_signature'];
    }

    /**
     * Sets custom_signature
     *
     * @param string $custom_signature Custom signature for all account emails users or recipients will receive.
     *
     * @return $this
     */
    public function setCustomSignature($custom_signature)
    {
        $this->container['custom_signature'] = $custom_signature;

        return $this;
    }

    /**
     * Gets account_onboarding
     *
     * @return bool
     */
    public function getAccountOnboarding()
    {
        return $this->container['account_onboarding'];
    }

    /**
     * Sets account_onboarding
     *
     * @param bool $account_onboarding Whether the web application onboarding help is enabled for new users in the account.
     *
     * @return $this
     */
    public function setAccountOnboarding($account_onboarding)
    {
        $this->container['account_onboarding'] = $account_onboarding;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Timestamp of account creation.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified Timestamp of account modification.
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
