<?php
/**
 * NotificationAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ExaVault\Model;

use \ArrayAccess;
use \ExaVault\ObjectSerializer;

/**
 * NotificationAttributes Class Doc Comment
 *
 * @category Class
 * @description Attributes for the notification including the path, recipients, and share data.
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationAttributes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NotificationAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'userId' => 'string',
'type' => 'string',
'path' => 'string',
'name' => 'string',
'action' => 'string',
'usernames' => 'string[]',
'recipients' => '\ExaVault\Model\NotificationRecipient[]',
'sendEmail' => 'bool',
'readableDescription' => 'string',
'readableDescriptionWithoutPath' => 'string',
'shareId' => 'string',
'message' => 'string',
'created' => '\DateTime',
'modified' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'userId' => null,
'type' => null,
'path' => null,
'name' => null,
'action' => null,
'usernames' => null,
'recipients' => null,
'sendEmail' => null,
'readableDescription' => null,
'readableDescriptionWithoutPath' => null,
'shareId' => null,
'message' => null,
'created' => 'date-time',
'modified' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userId' => 'userId',
'type' => 'type',
'path' => 'path',
'name' => 'name',
'action' => 'action',
'usernames' => 'usernames',
'recipients' => 'recipients',
'sendEmail' => 'sendEmail',
'readableDescription' => 'readableDescription',
'readableDescriptionWithoutPath' => 'readableDescriptionWithoutPath',
'shareId' => 'shareId',
'message' => 'message',
'created' => 'created',
'modified' => 'modified'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userId' => 'setUserId',
'type' => 'setType',
'path' => 'setPath',
'name' => 'setName',
'action' => 'setAction',
'usernames' => 'setUsernames',
'recipients' => 'setRecipients',
'sendEmail' => 'setSendEmail',
'readableDescription' => 'setReadableDescription',
'readableDescriptionWithoutPath' => 'setReadableDescriptionWithoutPath',
'shareId' => 'setShareId',
'message' => 'setMessage',
'created' => 'setCreated',
'modified' => 'setModified'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userId' => 'getUserId',
'type' => 'getType',
'path' => 'getPath',
'name' => 'getName',
'action' => 'getAction',
'usernames' => 'getUsernames',
'recipients' => 'getRecipients',
'sendEmail' => 'getSendEmail',
'readableDescription' => 'getReadableDescription',
'readableDescriptionWithoutPath' => 'getReadableDescriptionWithoutPath',
'shareId' => 'getShareId',
'message' => 'getMessage',
'created' => 'getCreated',
'modified' => 'getModified'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_FILE = 'file';
const TYPE_FOLDER = 'folder';
const TYPE_SHARED_FOLDER = 'shared_folder';
const TYPE_SEND_RECEIPT = 'send_receipt';
const TYPE_SHARE_RECEIPT = 'share_receipt';
const TYPE_FILE_DROP = 'file_drop';
const ACTION_UPLOAD = 'upload';
const ACTION_DOWNLOAD = 'download';
const ACTION_DELETE = 'delete';
const ACTION_ALL = 'all';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FILE,
self::TYPE_FOLDER,
self::TYPE_SHARED_FOLDER,
self::TYPE_SEND_RECEIPT,
self::TYPE_SHARE_RECEIPT,
self::TYPE_FILE_DROP,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_UPLOAD,
self::ACTION_DOWNLOAD,
self::ACTION_DELETE,
self::ACTION_ALL,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['userId'] = isset($data['userId']) ? $data['userId'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['usernames'] = isset($data['usernames']) ? $data['usernames'] : null;
        $this->container['recipients'] = isset($data['recipients']) ? $data['recipients'] : null;
        $this->container['sendEmail'] = isset($data['sendEmail']) ? $data['sendEmail'] : null;
        $this->container['readableDescription'] = isset($data['readableDescription']) ? $data['readableDescription'] : null;
        $this->container['readableDescriptionWithoutPath'] = isset($data['readableDescriptionWithoutPath']) ? $data['readableDescriptionWithoutPath'] : null;
        $this->container['shareId'] = isset($data['shareId']) ? $data['shareId'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'action', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets userId
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string $userId ID of the user that the notification belongs to.
     *
     * @return $this
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of the resource the notification is attached to.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path Path to the item that the notification is set on.
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the item that the notification is set on.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action Action that triggers notification.
     *
     * @return $this
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'action', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets usernames
     *
     * @return string[]
     */
    public function getUsernames()
    {
        return $this->container['usernames'];
    }

    /**
     * Sets usernames
     *
     * @param string[] $usernames Detail on which users can trigger the notification.
     *
     * @return $this
     */
    public function setUsernames($usernames)
    {
        $this->container['usernames'] = $usernames;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return \ExaVault\Model\NotificationRecipient[]
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param \ExaVault\Model\NotificationRecipient[] $recipients Notification recipients.
     *
     * @return $this
     */
    public function setRecipients($recipients)
    {
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets sendEmail
     *
     * @return bool
     */
    public function getSendEmail()
    {
        return $this->container['sendEmail'];
    }

    /**
     * Sets sendEmail
     *
     * @param bool $sendEmail Whether or not an email will send when the notification is triggered.
     *
     * @return $this
     */
    public function setSendEmail($sendEmail)
    {
        $this->container['sendEmail'] = $sendEmail;

        return $this;
    }

    /**
     * Gets readableDescription
     *
     * @return string
     */
    public function getReadableDescription()
    {
        return $this->container['readableDescription'];
    }

    /**
     * Sets readableDescription
     *
     * @param string $readableDescription Human readable description of the notification.
     *
     * @return $this
     */
    public function setReadableDescription($readableDescription)
    {
        $this->container['readableDescription'] = $readableDescription;

        return $this;
    }

    /**
     * Gets readableDescriptionWithoutPath
     *
     * @return string
     */
    public function getReadableDescriptionWithoutPath()
    {
        return $this->container['readableDescriptionWithoutPath'];
    }

    /**
     * Sets readableDescriptionWithoutPath
     *
     * @param string $readableDescriptionWithoutPath Human readable description of the notification without item path.
     *
     * @return $this
     */
    public function setReadableDescriptionWithoutPath($readableDescriptionWithoutPath)
    {
        $this->container['readableDescriptionWithoutPath'] = $readableDescriptionWithoutPath;

        return $this;
    }

    /**
     * Gets shareId
     *
     * @return string
     */
    public function getShareId()
    {
        return $this->container['shareId'];
    }

    /**
     * Sets shareId
     *
     * @param string $shareId ID of the share that the notification belogns to.
     *
     * @return $this
     */
    public function setShareId($shareId)
    {
        $this->container['shareId'] = $shareId;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Custom message that will be sent to the notification recipients.
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Timestamp of notifiction creation.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified Timestamp of notification modification.
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
