<?php
/**
 * UpdateAccountRequestBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ExaVault\Model;

use \ArrayAccess;
use \ExaVault\ObjectSerializer;

/**
 * UpdateAccountRequestBody Class Doc Comment
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateAccountRequestBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateAccountRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'secureOnly' => 'bool',
'complexPasswords' => 'bool',
'showReferralLinks' => 'bool',
'externalDomain' => 'string',
'emailContent' => 'string',
'emailSubject' => 'string',
'allowedIpRanges' => '\ExaVault\Model\AccountAllowedIpRanges[]',
'brandingSettings' => '\ExaVault\Model\BrandingSettingsValues',
'accountOnboarding' => 'bool',
'customSignature' => 'string',
'quota' => '\ExaVault\Model\AccountQuotaValues'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'secureOnly' => null,
'complexPasswords' => null,
'showReferralLinks' => null,
'externalDomain' => null,
'emailContent' => null,
'emailSubject' => null,
'allowedIpRanges' => null,
'brandingSettings' => null,
'accountOnboarding' => null,
'customSignature' => null,
'quota' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'secureOnly' => 'secureOnly',
'complexPasswords' => 'complexPasswords',
'showReferralLinks' => 'showReferralLinks',
'externalDomain' => 'externalDomain',
'emailContent' => 'emailContent',
'emailSubject' => 'emailSubject',
'allowedIpRanges' => 'allowedIpRanges',
'brandingSettings' => 'brandingSettings',
'accountOnboarding' => 'accountOnboarding',
'customSignature' => 'customSignature',
'quota' => 'quota'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'secureOnly' => 'setSecureOnly',
'complexPasswords' => 'setComplexPasswords',
'showReferralLinks' => 'setShowReferralLinks',
'externalDomain' => 'setExternalDomain',
'emailContent' => 'setEmailContent',
'emailSubject' => 'setEmailSubject',
'allowedIpRanges' => 'setAllowedIpRanges',
'brandingSettings' => 'setBrandingSettings',
'accountOnboarding' => 'setAccountOnboarding',
'customSignature' => 'setCustomSignature',
'quota' => 'setQuota'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'secureOnly' => 'getSecureOnly',
'complexPasswords' => 'getComplexPasswords',
'showReferralLinks' => 'getShowReferralLinks',
'externalDomain' => 'getExternalDomain',
'emailContent' => 'getEmailContent',
'emailSubject' => 'getEmailSubject',
'allowedIpRanges' => 'getAllowedIpRanges',
'brandingSettings' => 'getBrandingSettings',
'accountOnboarding' => 'getAccountOnboarding',
'customSignature' => 'getCustomSignature',
'quota' => 'getQuota'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['secureOnly'] = isset($data['secureOnly']) ? $data['secureOnly'] : null;
        $this->container['complexPasswords'] = isset($data['complexPasswords']) ? $data['complexPasswords'] : null;
        $this->container['showReferralLinks'] = isset($data['showReferralLinks']) ? $data['showReferralLinks'] : null;
        $this->container['externalDomain'] = isset($data['externalDomain']) ? $data['externalDomain'] : null;
        $this->container['emailContent'] = isset($data['emailContent']) ? $data['emailContent'] : null;
        $this->container['emailSubject'] = isset($data['emailSubject']) ? $data['emailSubject'] : null;
        $this->container['allowedIpRanges'] = isset($data['allowedIpRanges']) ? $data['allowedIpRanges'] : null;
        $this->container['brandingSettings'] = isset($data['brandingSettings']) ? $data['brandingSettings'] : null;
        $this->container['accountOnboarding'] = isset($data['accountOnboarding']) ? $data['accountOnboarding'] : null;
        $this->container['customSignature'] = isset($data['customSignature']) ? $data['customSignature'] : null;
        $this->container['quota'] = isset($data['quota']) ? $data['quota'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets secureOnly
     *
     * @return bool
     */
    public function getSecureOnly()
    {
        return $this->container['secureOnly'];
    }

    /**
     * Sets secureOnly
     *
     * @param bool $secureOnly Whether unencrypted FTP connections should be denied for the account.
     *
     * @return $this
     */
    public function setSecureOnly($secureOnly)
    {
        $this->container['secureOnly'] = $secureOnly;

        return $this;
    }

    /**
     * Gets complexPasswords
     *
     * @return bool
     */
    public function getComplexPasswords()
    {
        return $this->container['complexPasswords'];
    }

    /**
     * Sets complexPasswords
     *
     * @param bool $complexPasswords Whether to require complex passwords for all passwords.
     *
     * @return $this
     */
    public function setComplexPasswords($complexPasswords)
    {
        $this->container['complexPasswords'] = $complexPasswords;

        return $this;
    }

    /**
     * Gets showReferralLinks
     *
     * @return bool
     */
    public function getShowReferralLinks()
    {
        return $this->container['showReferralLinks'];
    }

    /**
     * Sets showReferralLinks
     *
     * @param bool $showReferralLinks Whether to display links for others to sign up on share views and invitation emails
     *
     * @return $this
     */
    public function setShowReferralLinks($showReferralLinks)
    {
        $this->container['showReferralLinks'] = $showReferralLinks;

        return $this;
    }

    /**
     * Gets externalDomain
     *
     * @return string
     */
    public function getExternalDomain()
    {
        return $this->container['externalDomain'];
    }

    /**
     * Sets externalDomain
     *
     * @param string $externalDomain Custom address used for web file manager. Not available for all account types.
     *
     * @return $this
     */
    public function setExternalDomain($externalDomain)
    {
        $this->container['externalDomain'] = $externalDomain;

        return $this;
    }

    /**
     * Gets emailContent
     *
     * @return string
     */
    public function getEmailContent()
    {
        return $this->container['emailContent'];
    }

    /**
     * Sets emailContent
     *
     * @param string $emailContent Content of welcome email template.
     *
     * @return $this
     */
    public function setEmailContent($emailContent)
    {
        $this->container['emailContent'] = $emailContent;

        return $this;
    }

    /**
     * Gets emailSubject
     *
     * @return string
     */
    public function getEmailSubject()
    {
        return $this->container['emailSubject'];
    }

    /**
     * Sets emailSubject
     *
     * @param string $emailSubject Subject line for welcome emails
     *
     * @return $this
     */
    public function setEmailSubject($emailSubject)
    {
        $this->container['emailSubject'] = $emailSubject;

        return $this;
    }

    /**
     * Gets allowedIpRanges
     *
     * @return \ExaVault\Model\AccountAllowedIpRanges[]
     */
    public function getAllowedIpRanges()
    {
        return $this->container['allowedIpRanges'];
    }

    /**
     * Sets allowedIpRanges
     *
     * @param \ExaVault\Model\AccountAllowedIpRanges[] $allowedIpRanges IP Address Ranges for restricting account access
     *
     * @return $this
     */
    public function setAllowedIpRanges($allowedIpRanges)
    {
        $this->container['allowedIpRanges'] = $allowedIpRanges;

        return $this;
    }

    /**
     * Gets brandingSettings
     *
     * @return \ExaVault\Model\BrandingSettingsValues
     */
    public function getBrandingSettings()
    {
        return $this->container['brandingSettings'];
    }

    /**
     * Sets brandingSettings
     *
     * @param \ExaVault\Model\BrandingSettingsValues $brandingSettings brandingSettings
     *
     * @return $this
     */
    public function setBrandingSettings($brandingSettings)
    {
        $this->container['brandingSettings'] = $brandingSettings;

        return $this;
    }

    /**
     * Gets accountOnboarding
     *
     * @return bool
     */
    public function getAccountOnboarding()
    {
        return $this->container['accountOnboarding'];
    }

    /**
     * Sets accountOnboarding
     *
     * @param bool $accountOnboarding Whether extra help popups can be enabled for users in the web file manager.
     *
     * @return $this
     */
    public function setAccountOnboarding($accountOnboarding)
    {
        $this->container['accountOnboarding'] = $accountOnboarding;

        return $this;
    }

    /**
     * Gets customSignature
     *
     * @return string
     */
    public function getCustomSignature()
    {
        return $this->container['customSignature'];
    }

    /**
     * Sets customSignature
     *
     * @param string $customSignature Signature to be automatically added to the bottom of emails generated by the account.
     *
     * @return $this
     */
    public function setCustomSignature($customSignature)
    {
        $this->container['customSignature'] = $customSignature;

        return $this;
    }

    /**
     * Gets quota
     *
     * @return \ExaVault\Model\AccountQuotaValues
     */
    public function getQuota()
    {
        return $this->container['quota'];
    }

    /**
     * Sets quota
     *
     * @param \ExaVault\Model\AccountQuotaValues $quota quota
     *
     * @return $this
     */
    public function setQuota($quota)
    {
        $this->container['quota'] = $quota;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
