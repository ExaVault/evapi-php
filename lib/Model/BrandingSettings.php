<?php
/**
 * BrandingSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ExaVault\Model;

use \ArrayAccess;
use \ExaVault\ObjectSerializer;

/**
 * BrandingSettings Class Doc Comment
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BrandingSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BrandingSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'companyName' => 'string',
'customEmail' => 'string',
'logo' => 'string',
'logoExt' => 'string',
'theme' => 'string',
'verifiedDomain' => 'string',
'verifiedDomainId' => 'string',
'verifiedDomainValid' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'companyName' => null,
'customEmail' => 'email',
'logo' => null,
'logoExt' => null,
'theme' => null,
'verifiedDomain' => null,
'verifiedDomainId' => null,
'verifiedDomainValid' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'companyName' => 'companyName',
'customEmail' => 'customEmail',
'logo' => 'logo',
'logoExt' => 'logoExt',
'theme' => 'theme',
'verifiedDomain' => 'verifiedDomain',
'verifiedDomainId' => 'verifiedDomainId',
'verifiedDomainValid' => 'verifiedDomainValid'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'companyName' => 'setCompanyName',
'customEmail' => 'setCustomEmail',
'logo' => 'setLogo',
'logoExt' => 'setLogoExt',
'theme' => 'setTheme',
'verifiedDomain' => 'setVerifiedDomain',
'verifiedDomainId' => 'setVerifiedDomainId',
'verifiedDomainValid' => 'setVerifiedDomainValid'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'companyName' => 'getCompanyName',
'customEmail' => 'getCustomEmail',
'logo' => 'getLogo',
'logoExt' => 'getLogoExt',
'theme' => 'getTheme',
'verifiedDomain' => 'getVerifiedDomain',
'verifiedDomainId' => 'getVerifiedDomainId',
'verifiedDomainValid' => 'getVerifiedDomainValid'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['companyName'] = isset($data['companyName']) ? $data['companyName'] : null;
        $this->container['customEmail'] = isset($data['customEmail']) ? $data['customEmail'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['logoExt'] = isset($data['logoExt']) ? $data['logoExt'] : null;
        $this->container['theme'] = isset($data['theme']) ? $data['theme'] : null;
        $this->container['verifiedDomain'] = isset($data['verifiedDomain']) ? $data['verifiedDomain'] : null;
        $this->container['verifiedDomainId'] = isset($data['verifiedDomainId']) ? $data['verifiedDomainId'] : null;
        $this->container['verifiedDomainValid'] = isset($data['verifiedDomainValid']) ? $data['verifiedDomainValid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets companyName
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['companyName'];
    }

    /**
     * Sets companyName
     *
     * @param string $companyName null
     *
     * @return $this
     */
    public function setCompanyName($companyName)
    {
        $this->container['companyName'] = $companyName;

        return $this;
    }

    /**
     * Gets customEmail
     *
     * @return string
     */
    public function getCustomEmail()
    {
        return $this->container['customEmail'];
    }

    /**
     * Sets customEmail
     *
     * @param string $customEmail null
     *
     * @return $this
     */
    public function setCustomEmail($customEmail)
    {
        $this->container['customEmail'] = $customEmail;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo null
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets logoExt
     *
     * @return string
     */
    public function getLogoExt()
    {
        return $this->container['logoExt'];
    }

    /**
     * Sets logoExt
     *
     * @param string $logoExt null
     *
     * @return $this
     */
    public function setLogoExt($logoExt)
    {
        $this->container['logoExt'] = $logoExt;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return string
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param string $theme null
     *
     * @return $this
     */
    public function setTheme($theme)
    {
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets verifiedDomain
     *
     * @return string
     */
    public function getVerifiedDomain()
    {
        return $this->container['verifiedDomain'];
    }

    /**
     * Sets verifiedDomain
     *
     * @param string $verifiedDomain verifiedDomain
     *
     * @return $this
     */
    public function setVerifiedDomain($verifiedDomain)
    {
        $this->container['verifiedDomain'] = $verifiedDomain;

        return $this;
    }

    /**
     * Gets verifiedDomainId
     *
     * @return string
     */
    public function getVerifiedDomainId()
    {
        return $this->container['verifiedDomainId'];
    }

    /**
     * Sets verifiedDomainId
     *
     * @param string $verifiedDomainId verifiedDomainId
     *
     * @return $this
     */
    public function setVerifiedDomainId($verifiedDomainId)
    {
        $this->container['verifiedDomainId'] = $verifiedDomainId;

        return $this;
    }

    /**
     * Gets verifiedDomainValid
     *
     * @return bool
     */
    public function getVerifiedDomainValid()
    {
        return $this->container['verifiedDomainValid'];
    }

    /**
     * Sets verifiedDomainValid
     *
     * @param bool $verifiedDomainValid verifiedDomainValid
     *
     * @return $this
     */
    public function setVerifiedDomainValid($verifiedDomainValid)
    {
        $this->container['verifiedDomainValid'] = $verifiedDomainValid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
