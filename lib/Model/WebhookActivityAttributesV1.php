<?php
/**
 * WebhookActivityAttributesV1
 *
 * PHP version 5
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ExaVault\Model;

use \ArrayAccess;
use \ExaVault\ObjectSerializer;

/**
 * WebhookActivityAttributesV1 Class Doc Comment
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebhookActivityAttributesV1 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WebhookActivityAttributesV1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'webhookId' => 'int',
'webhookFormat' => 'string',
'attemptId' => 'string',
'accountId' => 'string',
'resend' => 'bool',
'endpointUrl' => 'string',
'event' => 'string',
'status' => 'int',
'ipAddress' => 'string',
'response' => 'string',
'details' => '\ExaVault\Model\WebhookV1Details',
'webhookPath' => 'string',
'resourcePath' => 'string',
'username' => 'string',
'created' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'webhookId' => null,
'webhookFormat' => null,
'attemptId' => null,
'accountId' => null,
'resend' => null,
'endpointUrl' => 'uri',
'event' => null,
'status' => null,
'ipAddress' => null,
'response' => null,
'details' => null,
'webhookPath' => null,
'resourcePath' => null,
'username' => null,
'created' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'webhookId' => 'webhookId',
'webhookFormat' => 'webhookFormat',
'attemptId' => 'attemptId',
'accountId' => 'accountId',
'resend' => 'resend',
'endpointUrl' => 'endpointUrl',
'event' => 'event',
'status' => 'status',
'ipAddress' => 'ipAddress',
'response' => 'response',
'details' => 'details',
'webhookPath' => 'webhookPath',
'resourcePath' => 'resourcePath',
'username' => 'username',
'created' => 'created'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'webhookId' => 'setWebhookId',
'webhookFormat' => 'setWebhookFormat',
'attemptId' => 'setAttemptId',
'accountId' => 'setAccountId',
'resend' => 'setResend',
'endpointUrl' => 'setEndpointUrl',
'event' => 'setEvent',
'status' => 'setStatus',
'ipAddress' => 'setIpAddress',
'response' => 'setResponse',
'details' => 'setDetails',
'webhookPath' => 'setWebhookPath',
'resourcePath' => 'setResourcePath',
'username' => 'setUsername',
'created' => 'setCreated'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'webhookId' => 'getWebhookId',
'webhookFormat' => 'getWebhookFormat',
'attemptId' => 'getAttemptId',
'accountId' => 'getAccountId',
'resend' => 'getResend',
'endpointUrl' => 'getEndpointUrl',
'event' => 'getEvent',
'status' => 'getStatus',
'ipAddress' => 'getIpAddress',
'response' => 'getResponse',
'details' => 'getDetails',
'webhookPath' => 'getWebhookPath',
'resourcePath' => 'getResourcePath',
'username' => 'getUsername',
'created' => 'getCreated'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EVENT_RESOURCESUPLOAD = 'resources.upload';
const EVENT_RESOURCESDOWNLOAD = 'resources.download';
const EVENT_RESOURCESDELETE = 'resources.delete';
const EVENT_RESOURCESRENAME = 'resources.rename';
const EVENT_RESOURCESCOPY = 'resources.copy';
const EVENT_RESOURCESMOVE = 'resources.move';
const EVENT_RESOURCESCOMPRESS = 'resources.compress';
const EVENT_RESOURCESEXTRACT = 'resources.extract';
const EVENT_RESOURCESCREATE_FOLDER = 'resources.createFolder';
const EVENT_SHARESFORM_SUBMIT = 'shares.formSubmit';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventAllowableValues()
    {
        return [
            self::EVENT_RESOURCESUPLOAD,
self::EVENT_RESOURCESDOWNLOAD,
self::EVENT_RESOURCESDELETE,
self::EVENT_RESOURCESRENAME,
self::EVENT_RESOURCESCOPY,
self::EVENT_RESOURCESMOVE,
self::EVENT_RESOURCESCOMPRESS,
self::EVENT_RESOURCESEXTRACT,
self::EVENT_RESOURCESCREATE_FOLDER,
self::EVENT_SHARESFORM_SUBMIT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['webhookId'] = isset($data['webhookId']) ? $data['webhookId'] : null;
        $this->container['webhookFormat'] = isset($data['webhookFormat']) ? $data['webhookFormat'] : null;
        $this->container['attemptId'] = isset($data['attemptId']) ? $data['attemptId'] : null;
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['resend'] = isset($data['resend']) ? $data['resend'] : null;
        $this->container['endpointUrl'] = isset($data['endpointUrl']) ? $data['endpointUrl'] : null;
        $this->container['event'] = isset($data['event']) ? $data['event'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['ipAddress'] = isset($data['ipAddress']) ? $data['ipAddress'] : null;
        $this->container['response'] = isset($data['response']) ? $data['response'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['webhookPath'] = isset($data['webhookPath']) ? $data['webhookPath'] : null;
        $this->container['resourcePath'] = isset($data['resourcePath']) ? $data['resourcePath'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEventAllowableValues();
        if (!is_null($this->container['event']) && !in_array($this->container['event'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'event', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets webhookId
     *
     * @return int
     */
    public function getWebhookId()
    {
        return $this->container['webhookId'];
    }

    /**
     * Sets webhookId
     *
     * @param int $webhookId Unique ID of webhook configuration
     *
     * @return $this
     */
    public function setWebhookId($webhookId)
    {
        $this->container['webhookId'] = $webhookId;

        return $this;
    }

    /**
     * Gets webhookFormat
     *
     * @return string
     */
    public function getWebhookFormat()
    {
        return $this->container['webhookFormat'];
    }

    /**
     * Sets webhookFormat
     *
     * @param string $webhookFormat What version of webhook message is being sent `v1`
     *
     * @return $this
     */
    public function setWebhookFormat($webhookFormat)
    {
        $this->container['webhookFormat'] = $webhookFormat;

        return $this;
    }

    /**
     * Gets attemptId
     *
     * @return string
     */
    public function getAttemptId()
    {
        return $this->container['attemptId'];
    }

    /**
     * Sets attemptId
     *
     * @param string $attemptId Event - retry identifier
     *
     * @return $this
     */
    public function setAttemptId($attemptId)
    {
        $this->container['attemptId'] = $attemptId;

        return $this;
    }

    /**
     * Gets accountId
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param string $accountId Unique ID of account
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets resend
     *
     * @return bool
     */
    public function getResend()
    {
        return $this->container['resend'];
    }

    /**
     * Sets resend
     *
     * @param bool $resend Whether this attempt was a re-send of a previous attempt
     *
     * @return $this
     */
    public function setResend($resend)
    {
        $this->container['resend'] = $resend;

        return $this;
    }

    /**
     * Gets endpointUrl
     *
     * @return string
     */
    public function getEndpointUrl()
    {
        return $this->container['endpointUrl'];
    }

    /**
     * Sets endpointUrl
     *
     * @param string $endpointUrl The URL the message was sent to
     *
     * @return $this
     */
    public function setEndpointUrl($endpointUrl)
    {
        $this->container['endpointUrl'] = $endpointUrl;

        return $this;
    }

    /**
     * Gets event
     *
     * @return string
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param string $event Event type
     *
     * @return $this
     */
    public function setEvent($event)
    {
        $allowedValues = $this->getEventAllowableValues();
        if (!is_null($event) && !in_array($event, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'event', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status HTTP Status Code returned by webhook listener
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets ipAddress
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ipAddress'];
    }

    /**
     * Sets ipAddress
     *
     * @param string $ipAddress IP Address of related activity
     *
     * @return $this
     */
    public function setIpAddress($ipAddress)
    {
        $this->container['ipAddress'] = $ipAddress;

        return $this;
    }

    /**
     * Gets response
     *
     * @return string
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param string $response Body of web response returned by webhook listener
     *
     * @return $this
     */
    public function setResponse($response)
    {
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \ExaVault\Model\WebhookV1Details
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \ExaVault\Model\WebhookV1Details $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets webhookPath
     *
     * @return string
     */
    public function getWebhookPath()
    {
        return $this->container['webhookPath'];
    }

    /**
     * Sets webhookPath
     *
     * @param string $webhookPath Path that webhook is watching
     *
     * @return $this
     */
    public function setWebhookPath($webhookPath)
    {
        $this->container['webhookPath'] = $webhookPath;

        return $this;
    }

    /**
     * Gets resourcePath
     *
     * @return string
     */
    public function getResourcePath()
    {
        return $this->container['resourcePath'];
    }

    /**
     * Sets resourcePath
     *
     * @param string $resourcePath Path of resource that matched webhook
     *
     * @return $this
     */
    public function setResourcePath($resourcePath)
    {
        $this->container['resourcePath'] = $resourcePath;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username Username of related activity
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created Date and time of webhook message being generated by system
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
