<?php
/**
 * CallbackSettingsTriggers
 *
 * PHP version 5
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ExaVault\Model;

use \ArrayAccess;
use \ExaVault\ObjectSerializer;

/**
 * CallbackSettingsTriggers Class Doc Comment
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallbackSettingsTriggers implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CallbackSettings_triggers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'upload' => 'bool',
'download' => 'bool',
'delete' => 'bool',
'createFolder' => 'bool',
'rename' => 'bool',
'move' => 'bool',
'copy' => 'bool',
'compress' => 'bool',
'extract' => 'bool',
'shareFolder' => 'bool',
'sendFiles' => 'bool',
'receiveFiles' => 'bool',
'updateShare' => 'bool',
'updateReceive' => 'bool',
'deleteSend' => 'bool',
'deleteReceive' => 'bool',
'deleteShare' => 'bool',
'createNotification' => 'bool',
'updateNotification' => 'bool',
'deleteNotification' => 'bool',
'createUser' => 'bool',
'updateUser' => 'bool',
'deleteUser' => 'bool',
'userConnect' => 'bool',
'userDisconnect' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'upload' => null,
'download' => null,
'delete' => null,
'createFolder' => null,
'rename' => null,
'move' => null,
'copy' => null,
'compress' => null,
'extract' => null,
'shareFolder' => null,
'sendFiles' => null,
'receiveFiles' => null,
'updateShare' => null,
'updateReceive' => null,
'deleteSend' => null,
'deleteReceive' => null,
'deleteShare' => null,
'createNotification' => null,
'updateNotification' => null,
'deleteNotification' => null,
'createUser' => null,
'updateUser' => null,
'deleteUser' => null,
'userConnect' => null,
'userDisconnect' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'upload' => 'upload',
'download' => 'download',
'delete' => 'delete',
'createFolder' => 'createFolder',
'rename' => 'rename',
'move' => 'move',
'copy' => 'copy',
'compress' => 'compress',
'extract' => 'extract',
'shareFolder' => 'shareFolder',
'sendFiles' => 'sendFiles',
'receiveFiles' => 'receiveFiles',
'updateShare' => 'updateShare',
'updateReceive' => 'updateReceive',
'deleteSend' => 'deleteSend',
'deleteReceive' => 'deleteReceive',
'deleteShare' => 'deleteShare',
'createNotification' => 'createNotification',
'updateNotification' => 'updateNotification',
'deleteNotification' => 'deleteNotification',
'createUser' => 'createUser',
'updateUser' => 'updateUser',
'deleteUser' => 'deleteUser',
'userConnect' => 'userConnect',
'userDisconnect' => 'userDisconnect'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'upload' => 'setUpload',
'download' => 'setDownload',
'delete' => 'setDelete',
'createFolder' => 'setCreateFolder',
'rename' => 'setRename',
'move' => 'setMove',
'copy' => 'setCopy',
'compress' => 'setCompress',
'extract' => 'setExtract',
'shareFolder' => 'setShareFolder',
'sendFiles' => 'setSendFiles',
'receiveFiles' => 'setReceiveFiles',
'updateShare' => 'setUpdateShare',
'updateReceive' => 'setUpdateReceive',
'deleteSend' => 'setDeleteSend',
'deleteReceive' => 'setDeleteReceive',
'deleteShare' => 'setDeleteShare',
'createNotification' => 'setCreateNotification',
'updateNotification' => 'setUpdateNotification',
'deleteNotification' => 'setDeleteNotification',
'createUser' => 'setCreateUser',
'updateUser' => 'setUpdateUser',
'deleteUser' => 'setDeleteUser',
'userConnect' => 'setUserConnect',
'userDisconnect' => 'setUserDisconnect'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'upload' => 'getUpload',
'download' => 'getDownload',
'delete' => 'getDelete',
'createFolder' => 'getCreateFolder',
'rename' => 'getRename',
'move' => 'getMove',
'copy' => 'getCopy',
'compress' => 'getCompress',
'extract' => 'getExtract',
'shareFolder' => 'getShareFolder',
'sendFiles' => 'getSendFiles',
'receiveFiles' => 'getReceiveFiles',
'updateShare' => 'getUpdateShare',
'updateReceive' => 'getUpdateReceive',
'deleteSend' => 'getDeleteSend',
'deleteReceive' => 'getDeleteReceive',
'deleteShare' => 'getDeleteShare',
'createNotification' => 'getCreateNotification',
'updateNotification' => 'getUpdateNotification',
'deleteNotification' => 'getDeleteNotification',
'createUser' => 'getCreateUser',
'updateUser' => 'getUpdateUser',
'deleteUser' => 'getDeleteUser',
'userConnect' => 'getUserConnect',
'userDisconnect' => 'getUserDisconnect'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['upload'] = isset($data['upload']) ? $data['upload'] : null;
        $this->container['download'] = isset($data['download']) ? $data['download'] : null;
        $this->container['delete'] = isset($data['delete']) ? $data['delete'] : null;
        $this->container['createFolder'] = isset($data['createFolder']) ? $data['createFolder'] : null;
        $this->container['rename'] = isset($data['rename']) ? $data['rename'] : null;
        $this->container['move'] = isset($data['move']) ? $data['move'] : null;
        $this->container['copy'] = isset($data['copy']) ? $data['copy'] : null;
        $this->container['compress'] = isset($data['compress']) ? $data['compress'] : null;
        $this->container['extract'] = isset($data['extract']) ? $data['extract'] : null;
        $this->container['shareFolder'] = isset($data['shareFolder']) ? $data['shareFolder'] : null;
        $this->container['sendFiles'] = isset($data['sendFiles']) ? $data['sendFiles'] : null;
        $this->container['receiveFiles'] = isset($data['receiveFiles']) ? $data['receiveFiles'] : null;
        $this->container['updateShare'] = isset($data['updateShare']) ? $data['updateShare'] : null;
        $this->container['updateReceive'] = isset($data['updateReceive']) ? $data['updateReceive'] : null;
        $this->container['deleteSend'] = isset($data['deleteSend']) ? $data['deleteSend'] : null;
        $this->container['deleteReceive'] = isset($data['deleteReceive']) ? $data['deleteReceive'] : null;
        $this->container['deleteShare'] = isset($data['deleteShare']) ? $data['deleteShare'] : null;
        $this->container['createNotification'] = isset($data['createNotification']) ? $data['createNotification'] : null;
        $this->container['updateNotification'] = isset($data['updateNotification']) ? $data['updateNotification'] : null;
        $this->container['deleteNotification'] = isset($data['deleteNotification']) ? $data['deleteNotification'] : null;
        $this->container['createUser'] = isset($data['createUser']) ? $data['createUser'] : null;
        $this->container['updateUser'] = isset($data['updateUser']) ? $data['updateUser'] : null;
        $this->container['deleteUser'] = isset($data['deleteUser']) ? $data['deleteUser'] : null;
        $this->container['userConnect'] = isset($data['userConnect']) ? $data['userConnect'] : null;
        $this->container['userDisconnect'] = isset($data['userDisconnect']) ? $data['userDisconnect'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets upload
     *
     * @return bool
     */
    public function getUpload()
    {
        return $this->container['upload'];
    }

    /**
     * Sets upload
     *
     * @param bool $upload Trigger callback on upload.
     *
     * @return $this
     */
    public function setUpload($upload)
    {
        $this->container['upload'] = $upload;

        return $this;
    }

    /**
     * Gets download
     *
     * @return bool
     */
    public function getDownload()
    {
        return $this->container['download'];
    }

    /**
     * Sets download
     *
     * @param bool $download Trigger callback on download.
     *
     * @return $this
     */
    public function setDownload($download)
    {
        $this->container['download'] = $download;

        return $this;
    }

    /**
     * Gets delete
     *
     * @return bool
     */
    public function getDelete()
    {
        return $this->container['delete'];
    }

    /**
     * Sets delete
     *
     * @param bool $delete Trigger callback on delete.
     *
     * @return $this
     */
    public function setDelete($delete)
    {
        $this->container['delete'] = $delete;

        return $this;
    }

    /**
     * Gets createFolder
     *
     * @return bool
     */
    public function getCreateFolder()
    {
        return $this->container['createFolder'];
    }

    /**
     * Sets createFolder
     *
     * @param bool $createFolder Trigger callback on fodler create.
     *
     * @return $this
     */
    public function setCreateFolder($createFolder)
    {
        $this->container['createFolder'] = $createFolder;

        return $this;
    }

    /**
     * Gets rename
     *
     * @return bool
     */
    public function getRename()
    {
        return $this->container['rename'];
    }

    /**
     * Sets rename
     *
     * @param bool $rename Trigger callback on rename.
     *
     * @return $this
     */
    public function setRename($rename)
    {
        $this->container['rename'] = $rename;

        return $this;
    }

    /**
     * Gets move
     *
     * @return bool
     */
    public function getMove()
    {
        return $this->container['move'];
    }

    /**
     * Sets move
     *
     * @param bool $move Trigger callback on move.
     *
     * @return $this
     */
    public function setMove($move)
    {
        $this->container['move'] = $move;

        return $this;
    }

    /**
     * Gets copy
     *
     * @return bool
     */
    public function getCopy()
    {
        return $this->container['copy'];
    }

    /**
     * Sets copy
     *
     * @param bool $copy Trigger callback on copy.
     *
     * @return $this
     */
    public function setCopy($copy)
    {
        $this->container['copy'] = $copy;

        return $this;
    }

    /**
     * Gets compress
     *
     * @return bool
     */
    public function getCompress()
    {
        return $this->container['compress'];
    }

    /**
     * Sets compress
     *
     * @param bool $compress Trigger callback on compress.
     *
     * @return $this
     */
    public function setCompress($compress)
    {
        $this->container['compress'] = $compress;

        return $this;
    }

    /**
     * Gets extract
     *
     * @return bool
     */
    public function getExtract()
    {
        return $this->container['extract'];
    }

    /**
     * Sets extract
     *
     * @param bool $extract Trigger callback on extract.
     *
     * @return $this
     */
    public function setExtract($extract)
    {
        $this->container['extract'] = $extract;

        return $this;
    }

    /**
     * Gets shareFolder
     *
     * @return bool
     */
    public function getShareFolder()
    {
        return $this->container['shareFolder'];
    }

    /**
     * Sets shareFolder
     *
     * @param bool $shareFolder Trigger callback on share folder create.
     *
     * @return $this
     */
    public function setShareFolder($shareFolder)
    {
        $this->container['shareFolder'] = $shareFolder;

        return $this;
    }

    /**
     * Gets sendFiles
     *
     * @return bool
     */
    public function getSendFiles()
    {
        return $this->container['sendFiles'];
    }

    /**
     * Sets sendFiles
     *
     * @param bool $sendFiles Trigger callback on send files.
     *
     * @return $this
     */
    public function setSendFiles($sendFiles)
    {
        $this->container['sendFiles'] = $sendFiles;

        return $this;
    }

    /**
     * Gets receiveFiles
     *
     * @return bool
     */
    public function getReceiveFiles()
    {
        return $this->container['receiveFiles'];
    }

    /**
     * Sets receiveFiles
     *
     * @param bool $receiveFiles Trigger callback on receive folder create.
     *
     * @return $this
     */
    public function setReceiveFiles($receiveFiles)
    {
        $this->container['receiveFiles'] = $receiveFiles;

        return $this;
    }

    /**
     * Gets updateShare
     *
     * @return bool
     */
    public function getUpdateShare()
    {
        return $this->container['updateShare'];
    }

    /**
     * Sets updateShare
     *
     * @param bool $updateShare Trigger callback on share folder update.
     *
     * @return $this
     */
    public function setUpdateShare($updateShare)
    {
        $this->container['updateShare'] = $updateShare;

        return $this;
    }

    /**
     * Gets updateReceive
     *
     * @return bool
     */
    public function getUpdateReceive()
    {
        return $this->container['updateReceive'];
    }

    /**
     * Sets updateReceive
     *
     * @param bool $updateReceive Trigger callback on receive folder update.
     *
     * @return $this
     */
    public function setUpdateReceive($updateReceive)
    {
        $this->container['updateReceive'] = $updateReceive;

        return $this;
    }

    /**
     * Gets deleteSend
     *
     * @return bool
     */
    public function getDeleteSend()
    {
        return $this->container['deleteSend'];
    }

    /**
     * Sets deleteSend
     *
     * @param bool $deleteSend Trigger callback on send files delete.
     *
     * @return $this
     */
    public function setDeleteSend($deleteSend)
    {
        $this->container['deleteSend'] = $deleteSend;

        return $this;
    }

    /**
     * Gets deleteReceive
     *
     * @return bool
     */
    public function getDeleteReceive()
    {
        return $this->container['deleteReceive'];
    }

    /**
     * Sets deleteReceive
     *
     * @param bool $deleteReceive Trigger callback on receive folder delete.
     *
     * @return $this
     */
    public function setDeleteReceive($deleteReceive)
    {
        $this->container['deleteReceive'] = $deleteReceive;

        return $this;
    }

    /**
     * Gets deleteShare
     *
     * @return bool
     */
    public function getDeleteShare()
    {
        return $this->container['deleteShare'];
    }

    /**
     * Sets deleteShare
     *
     * @param bool $deleteShare Trigger callback on share folder delete.
     *
     * @return $this
     */
    public function setDeleteShare($deleteShare)
    {
        $this->container['deleteShare'] = $deleteShare;

        return $this;
    }

    /**
     * Gets createNotification
     *
     * @return bool
     */
    public function getCreateNotification()
    {
        return $this->container['createNotification'];
    }

    /**
     * Sets createNotification
     *
     * @param bool $createNotification Trigger callback on notification create.
     *
     * @return $this
     */
    public function setCreateNotification($createNotification)
    {
        $this->container['createNotification'] = $createNotification;

        return $this;
    }

    /**
     * Gets updateNotification
     *
     * @return bool
     */
    public function getUpdateNotification()
    {
        return $this->container['updateNotification'];
    }

    /**
     * Sets updateNotification
     *
     * @param bool $updateNotification Trigger callback on notification update.
     *
     * @return $this
     */
    public function setUpdateNotification($updateNotification)
    {
        $this->container['updateNotification'] = $updateNotification;

        return $this;
    }

    /**
     * Gets deleteNotification
     *
     * @return bool
     */
    public function getDeleteNotification()
    {
        return $this->container['deleteNotification'];
    }

    /**
     * Sets deleteNotification
     *
     * @param bool $deleteNotification Trigger callback on notification delete.
     *
     * @return $this
     */
    public function setDeleteNotification($deleteNotification)
    {
        $this->container['deleteNotification'] = $deleteNotification;

        return $this;
    }

    /**
     * Gets createUser
     *
     * @return bool
     */
    public function getCreateUser()
    {
        return $this->container['createUser'];
    }

    /**
     * Sets createUser
     *
     * @param bool $createUser Trigger callback on user create.
     *
     * @return $this
     */
    public function setCreateUser($createUser)
    {
        $this->container['createUser'] = $createUser;

        return $this;
    }

    /**
     * Gets updateUser
     *
     * @return bool
     */
    public function getUpdateUser()
    {
        return $this->container['updateUser'];
    }

    /**
     * Sets updateUser
     *
     * @param bool $updateUser Trigger callback on user update.
     *
     * @return $this
     */
    public function setUpdateUser($updateUser)
    {
        $this->container['updateUser'] = $updateUser;

        return $this;
    }

    /**
     * Gets deleteUser
     *
     * @return bool
     */
    public function getDeleteUser()
    {
        return $this->container['deleteUser'];
    }

    /**
     * Sets deleteUser
     *
     * @param bool $deleteUser Trigger callback on user delete.
     *
     * @return $this
     */
    public function setDeleteUser($deleteUser)
    {
        $this->container['deleteUser'] = $deleteUser;

        return $this;
    }

    /**
     * Gets userConnect
     *
     * @return bool
     */
    public function getUserConnect()
    {
        return $this->container['userConnect'];
    }

    /**
     * Sets userConnect
     *
     * @param bool $userConnect Trigger callback on user connect.
     *
     * @return $this
     */
    public function setUserConnect($userConnect)
    {
        $this->container['userConnect'] = $userConnect;

        return $this;
    }

    /**
     * Gets userDisconnect
     *
     * @return bool
     */
    public function getUserDisconnect()
    {
        return $this->container['userDisconnect'];
    }

    /**
     * Sets userDisconnect
     *
     * @param bool $userDisconnect Trigger callback on user disconnect.
     *
     * @return $this
     */
    public function setUserDisconnect($userDisconnect)
    {
        $this->container['userDisconnect'] = $userDisconnect;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
