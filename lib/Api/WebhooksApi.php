<?php
/**
 * WebhooksApi
 * PHP version 5
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ExaVault\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ExaVault\ApiException;
use ExaVault\Configuration;
use ExaVault\HeaderSelector;
use ExaVault\ObjectSerializer;

/**
 * WebhooksApi Class Doc Comment
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebhooksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addWebhook
     *
     * Add A New Webhook
     *
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  \ExaVault\Model\AddWebhookRequestBody $body body (optional)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ExaVault\Model\WebhookResponse
     */
    public function addWebhook($evApiKey, $evAccessToken, $body = null)
    {
        list($response) = $this->addWebhookWithHttpInfo($evApiKey, $evAccessToken, $body);
        return $response;
    }

    /**
     * Operation addWebhookWithHttpInfo
     *
     * Add A New Webhook
     *
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  \ExaVault\Model\AddWebhookRequestBody $body (optional)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ExaVault\Model\WebhookResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addWebhookWithHttpInfo($evApiKey, $evAccessToken, $body = null)
    {
        $returnType = '\ExaVault\Model\WebhookResponse';
        $request = $this->addWebhookRequest($evApiKey, $evAccessToken, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ExaVault\Model\WebhookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addWebhookAsync
     *
     * Add A New Webhook
     *
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  \ExaVault\Model\AddWebhookRequestBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addWebhookAsync($evApiKey, $evAccessToken, $body = null)
    {
        return $this->addWebhookAsyncWithHttpInfo($evApiKey, $evAccessToken, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addWebhookAsyncWithHttpInfo
     *
     * Add A New Webhook
     *
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  \ExaVault\Model\AddWebhookRequestBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addWebhookAsyncWithHttpInfo($evApiKey, $evAccessToken, $body = null)
    {
        $returnType = '\ExaVault\Model\WebhookResponse';
        $request = $this->addWebhookRequest($evApiKey, $evAccessToken, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addWebhook'
     *
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  \ExaVault\Model\AddWebhookRequestBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addWebhookRequest($evApiKey, $evAccessToken, $body = null)
    {
        // verify the required parameter 'evApiKey' is set
        if ($evApiKey === null || (is_array($evApiKey) && count($evApiKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evApiKey when calling addWebhook'
            );
        }
        // verify the required parameter 'evAccessToken' is set
        if ($evAccessToken === null || (is_array($evAccessToken) && count($evAccessToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evAccessToken when calling addWebhook'
            );
        }

        $resourcePath = '/webhooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($evApiKey !== null) {
            $headerParams['ev-api-key'] = ObjectSerializer::toHeaderValue($evApiKey);
        }
        // header params
        if ($evAccessToken !== null) {
            $headerParams['ev-access-token'] = ObjectSerializer::toHeaderValue($evAccessToken);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWebhook
     *
     * Delete a webhook
     *
     * @param  int $id Webhook endpoint ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ExaVault\Model\EmptyResponse
     */
    public function deleteWebhook($id, $evApiKey, $evAccessToken)
    {
        list($response) = $this->deleteWebhookWithHttpInfo($id, $evApiKey, $evAccessToken);
        return $response;
    }

    /**
     * Operation deleteWebhookWithHttpInfo
     *
     * Delete a webhook
     *
     * @param  int $id Webhook endpoint ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ExaVault\Model\EmptyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWebhookWithHttpInfo($id, $evApiKey, $evAccessToken)
    {
        $returnType = '\ExaVault\Model\EmptyResponse';
        $request = $this->deleteWebhookRequest($id, $evApiKey, $evAccessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ExaVault\Model\EmptyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWebhookAsync
     *
     * Delete a webhook
     *
     * @param  int $id Webhook endpoint ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWebhookAsync($id, $evApiKey, $evAccessToken)
    {
        return $this->deleteWebhookAsyncWithHttpInfo($id, $evApiKey, $evAccessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWebhookAsyncWithHttpInfo
     *
     * Delete a webhook
     *
     * @param  int $id Webhook endpoint ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWebhookAsyncWithHttpInfo($id, $evApiKey, $evAccessToken)
    {
        $returnType = '\ExaVault\Model\EmptyResponse';
        $request = $this->deleteWebhookRequest($id, $evApiKey, $evAccessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWebhook'
     *
     * @param  int $id Webhook endpoint ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWebhookRequest($id, $evApiKey, $evAccessToken)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteWebhook'
            );
        }
        // verify the required parameter 'evApiKey' is set
        if ($evApiKey === null || (is_array($evApiKey) && count($evApiKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evApiKey when calling deleteWebhook'
            );
        }
        // verify the required parameter 'evAccessToken' is set
        if ($evAccessToken === null || (is_array($evAccessToken) && count($evAccessToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evAccessToken when calling deleteWebhook'
            );
        }

        $resourcePath = '/webhooks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($evApiKey !== null) {
            $headerParams['ev-api-key'] = ObjectSerializer::toHeaderValue($evApiKey);
        }
        // header params
        if ($evAccessToken !== null) {
            $headerParams['ev-access-token'] = ObjectSerializer::toHeaderValue($evAccessToken);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWebhookById
     *
     * Get info for a webhook
     *
     * @param  int $id Webhook endpoint ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  string $include Include metadata for related items; &#x60;ownerAccount&#x60; and/or &#x60;resource&#x60; (optional)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ExaVault\Model\WebhookResponse
     */
    public function getWebhookById($id, $evApiKey, $evAccessToken, $include = null)
    {
        list($response) = $this->getWebhookByIdWithHttpInfo($id, $evApiKey, $evAccessToken, $include);
        return $response;
    }

    /**
     * Operation getWebhookByIdWithHttpInfo
     *
     * Get info for a webhook
     *
     * @param  int $id Webhook endpoint ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  string $include Include metadata for related items; &#x60;ownerAccount&#x60; and/or &#x60;resource&#x60; (optional)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ExaVault\Model\WebhookResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWebhookByIdWithHttpInfo($id, $evApiKey, $evAccessToken, $include = null)
    {
        $returnType = '\ExaVault\Model\WebhookResponse';
        $request = $this->getWebhookByIdRequest($id, $evApiKey, $evAccessToken, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ExaVault\Model\WebhookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWebhookByIdAsync
     *
     * Get info for a webhook
     *
     * @param  int $id Webhook endpoint ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  string $include Include metadata for related items; &#x60;ownerAccount&#x60; and/or &#x60;resource&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookByIdAsync($id, $evApiKey, $evAccessToken, $include = null)
    {
        return $this->getWebhookByIdAsyncWithHttpInfo($id, $evApiKey, $evAccessToken, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWebhookByIdAsyncWithHttpInfo
     *
     * Get info for a webhook
     *
     * @param  int $id Webhook endpoint ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  string $include Include metadata for related items; &#x60;ownerAccount&#x60; and/or &#x60;resource&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookByIdAsyncWithHttpInfo($id, $evApiKey, $evAccessToken, $include = null)
    {
        $returnType = '\ExaVault\Model\WebhookResponse';
        $request = $this->getWebhookByIdRequest($id, $evApiKey, $evAccessToken, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWebhookById'
     *
     * @param  int $id Webhook endpoint ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  string $include Include metadata for related items; &#x60;ownerAccount&#x60; and/or &#x60;resource&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWebhookByIdRequest($id, $evApiKey, $evAccessToken, $include = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getWebhookById'
            );
        }
        // verify the required parameter 'evApiKey' is set
        if ($evApiKey === null || (is_array($evApiKey) && count($evApiKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evApiKey when calling getWebhookById'
            );
        }
        // verify the required parameter 'evAccessToken' is set
        if ($evAccessToken === null || (is_array($evAccessToken) && count($evAccessToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evAccessToken when calling getWebhookById'
            );
        }

        $resourcePath = '/webhooks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include, null);
        }
        // header params
        if ($evApiKey !== null) {
            $headerParams['ev-api-key'] = ObjectSerializer::toHeaderValue($evApiKey);
        }
        // header params
        if ($evAccessToken !== null) {
            $headerParams['ev-access-token'] = ObjectSerializer::toHeaderValue($evAccessToken);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWehooksList
     *
     * Get Webhooks List
     *
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  string $include List of related record types to include. Valid options are &#x60;owningAccount&#x60; and &#x60;resource&#x60; (optional)
     * @param  int $offset Records to skip before returning results. (optional)
     * @param  int $limit Limit of the records list (optional)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ExaVault\Model\WebhookCollectionResponse
     */
    public function getWehooksList($evApiKey, $evAccessToken, $include = null, $offset = null, $limit = null)
    {
        list($response) = $this->getWehooksListWithHttpInfo($evApiKey, $evAccessToken, $include, $offset, $limit);
        return $response;
    }

    /**
     * Operation getWehooksListWithHttpInfo
     *
     * Get Webhooks List
     *
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  string $include List of related record types to include. Valid options are &#x60;owningAccount&#x60; and &#x60;resource&#x60; (optional)
     * @param  int $offset Records to skip before returning results. (optional)
     * @param  int $limit Limit of the records list (optional)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ExaVault\Model\WebhookCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWehooksListWithHttpInfo($evApiKey, $evAccessToken, $include = null, $offset = null, $limit = null)
    {
        $returnType = '\ExaVault\Model\WebhookCollectionResponse';
        $request = $this->getWehooksListRequest($evApiKey, $evAccessToken, $include, $offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ExaVault\Model\WebhookCollectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWehooksListAsync
     *
     * Get Webhooks List
     *
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  string $include List of related record types to include. Valid options are &#x60;owningAccount&#x60; and &#x60;resource&#x60; (optional)
     * @param  int $offset Records to skip before returning results. (optional)
     * @param  int $limit Limit of the records list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWehooksListAsync($evApiKey, $evAccessToken, $include = null, $offset = null, $limit = null)
    {
        return $this->getWehooksListAsyncWithHttpInfo($evApiKey, $evAccessToken, $include, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWehooksListAsyncWithHttpInfo
     *
     * Get Webhooks List
     *
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  string $include List of related record types to include. Valid options are &#x60;owningAccount&#x60; and &#x60;resource&#x60; (optional)
     * @param  int $offset Records to skip before returning results. (optional)
     * @param  int $limit Limit of the records list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWehooksListAsyncWithHttpInfo($evApiKey, $evAccessToken, $include = null, $offset = null, $limit = null)
    {
        $returnType = '\ExaVault\Model\WebhookCollectionResponse';
        $request = $this->getWehooksListRequest($evApiKey, $evAccessToken, $include, $offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWehooksList'
     *
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  string $include List of related record types to include. Valid options are &#x60;owningAccount&#x60; and &#x60;resource&#x60; (optional)
     * @param  int $offset Records to skip before returning results. (optional)
     * @param  int $limit Limit of the records list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWehooksListRequest($evApiKey, $evAccessToken, $include = null, $offset = null, $limit = null)
    {
        // verify the required parameter 'evApiKey' is set
        if ($evApiKey === null || (is_array($evApiKey) && count($evApiKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evApiKey when calling getWehooksList'
            );
        }
        // verify the required parameter 'evAccessToken' is set
        if ($evAccessToken === null || (is_array($evAccessToken) && count($evAccessToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evAccessToken when calling getWehooksList'
            );
        }

        $resourcePath = '/webhooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // header params
        if ($evApiKey !== null) {
            $headerParams['ev-api-key'] = ObjectSerializer::toHeaderValue($evApiKey);
        }
        // header params
        if ($evAccessToken !== null) {
            $headerParams['ev-access-token'] = ObjectSerializer::toHeaderValue($evAccessToken);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation regenerateWebhookToken
     *
     * Regenerate security token
     *
     * @param  string $id Webhook ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ExaVault\Model\WebhookResponse
     */
    public function regenerateWebhookToken($id, $evApiKey, $evAccessToken)
    {
        list($response) = $this->regenerateWebhookTokenWithHttpInfo($id, $evApiKey, $evAccessToken);
        return $response;
    }

    /**
     * Operation regenerateWebhookTokenWithHttpInfo
     *
     * Regenerate security token
     *
     * @param  string $id Webhook ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ExaVault\Model\WebhookResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function regenerateWebhookTokenWithHttpInfo($id, $evApiKey, $evAccessToken)
    {
        $returnType = '\ExaVault\Model\WebhookResponse';
        $request = $this->regenerateWebhookTokenRequest($id, $evApiKey, $evAccessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ExaVault\Model\WebhookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation regenerateWebhookTokenAsync
     *
     * Regenerate security token
     *
     * @param  string $id Webhook ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function regenerateWebhookTokenAsync($id, $evApiKey, $evAccessToken)
    {
        return $this->regenerateWebhookTokenAsyncWithHttpInfo($id, $evApiKey, $evAccessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation regenerateWebhookTokenAsyncWithHttpInfo
     *
     * Regenerate security token
     *
     * @param  string $id Webhook ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function regenerateWebhookTokenAsyncWithHttpInfo($id, $evApiKey, $evAccessToken)
    {
        $returnType = '\ExaVault\Model\WebhookResponse';
        $request = $this->regenerateWebhookTokenRequest($id, $evApiKey, $evAccessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'regenerateWebhookToken'
     *
     * @param  string $id Webhook ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function regenerateWebhookTokenRequest($id, $evApiKey, $evAccessToken)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling regenerateWebhookToken'
            );
        }
        // verify the required parameter 'evApiKey' is set
        if ($evApiKey === null || (is_array($evApiKey) && count($evApiKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evApiKey when calling regenerateWebhookToken'
            );
        }
        // verify the required parameter 'evAccessToken' is set
        if ($evAccessToken === null || (is_array($evAccessToken) && count($evAccessToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evAccessToken when calling regenerateWebhookToken'
            );
        }

        $resourcePath = '/webhooks/regenerate-token/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($evApiKey !== null) {
            $headerParams['ev-api-key'] = ObjectSerializer::toHeaderValue($evApiKey);
        }
        // header params
        if ($evAccessToken !== null) {
            $headerParams['ev-access-token'] = ObjectSerializer::toHeaderValue($evAccessToken);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resendWebhookActivityEntry
     *
     * Resend a webhook message
     *
     * @param  string $activityId Webhooks activity entry ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ExaVault\Model\EmptyResponse
     */
    public function resendWebhookActivityEntry($activityId, $evApiKey, $evAccessToken)
    {
        list($response) = $this->resendWebhookActivityEntryWithHttpInfo($activityId, $evApiKey, $evAccessToken);
        return $response;
    }

    /**
     * Operation resendWebhookActivityEntryWithHttpInfo
     *
     * Resend a webhook message
     *
     * @param  string $activityId Webhooks activity entry ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ExaVault\Model\EmptyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function resendWebhookActivityEntryWithHttpInfo($activityId, $evApiKey, $evAccessToken)
    {
        $returnType = '\ExaVault\Model\EmptyResponse';
        $request = $this->resendWebhookActivityEntryRequest($activityId, $evApiKey, $evAccessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ExaVault\Model\EmptyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resendWebhookActivityEntryAsync
     *
     * Resend a webhook message
     *
     * @param  string $activityId Webhooks activity entry ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resendWebhookActivityEntryAsync($activityId, $evApiKey, $evAccessToken)
    {
        return $this->resendWebhookActivityEntryAsyncWithHttpInfo($activityId, $evApiKey, $evAccessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resendWebhookActivityEntryAsyncWithHttpInfo
     *
     * Resend a webhook message
     *
     * @param  string $activityId Webhooks activity entry ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resendWebhookActivityEntryAsyncWithHttpInfo($activityId, $evApiKey, $evAccessToken)
    {
        $returnType = '\ExaVault\Model\EmptyResponse';
        $request = $this->resendWebhookActivityEntryRequest($activityId, $evApiKey, $evAccessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resendWebhookActivityEntry'
     *
     * @param  string $activityId Webhooks activity entry ID (required)
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function resendWebhookActivityEntryRequest($activityId, $evApiKey, $evAccessToken)
    {
        // verify the required parameter 'activityId' is set
        if ($activityId === null || (is_array($activityId) && count($activityId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $activityId when calling resendWebhookActivityEntry'
            );
        }
        // verify the required parameter 'evApiKey' is set
        if ($evApiKey === null || (is_array($evApiKey) && count($evApiKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evApiKey when calling resendWebhookActivityEntry'
            );
        }
        // verify the required parameter 'evAccessToken' is set
        if ($evAccessToken === null || (is_array($evAccessToken) && count($evAccessToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evAccessToken when calling resendWebhookActivityEntry'
            );
        }

        $resourcePath = '/webhooks/resend/{activityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($evApiKey !== null) {
            $headerParams['ev-api-key'] = ObjectSerializer::toHeaderValue($evApiKey);
        }
        // header params
        if ($evAccessToken !== null) {
            $headerParams['ev-access-token'] = ObjectSerializer::toHeaderValue($evAccessToken);
        }

        // path params
        if ($activityId !== null) {
            $resourcePath = str_replace(
                '{' . 'activityId' . '}',
                ObjectSerializer::toPathValue($activityId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWebhook
     *
     * Update a webhook
     *
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  int $id Webhook endpoint ID (required)
     * @param  \ExaVault\Model\UpdateWebhookRequestBody $body body (optional)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ExaVault\Model\WebhookResponse
     */
    public function updateWebhook($evApiKey, $evAccessToken, $id, $body = null)
    {
        list($response) = $this->updateWebhookWithHttpInfo($evApiKey, $evAccessToken, $id, $body);
        return $response;
    }

    /**
     * Operation updateWebhookWithHttpInfo
     *
     * Update a webhook
     *
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  int $id Webhook endpoint ID (required)
     * @param  \ExaVault\Model\UpdateWebhookRequestBody $body (optional)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ExaVault\Model\WebhookResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWebhookWithHttpInfo($evApiKey, $evAccessToken, $id, $body = null)
    {
        $returnType = '\ExaVault\Model\WebhookResponse';
        $request = $this->updateWebhookRequest($evApiKey, $evAccessToken, $id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ExaVault\Model\WebhookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWebhookAsync
     *
     * Update a webhook
     *
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  int $id Webhook endpoint ID (required)
     * @param  \ExaVault\Model\UpdateWebhookRequestBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWebhookAsync($evApiKey, $evAccessToken, $id, $body = null)
    {
        return $this->updateWebhookAsyncWithHttpInfo($evApiKey, $evAccessToken, $id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateWebhookAsyncWithHttpInfo
     *
     * Update a webhook
     *
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  int $id Webhook endpoint ID (required)
     * @param  \ExaVault\Model\UpdateWebhookRequestBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWebhookAsyncWithHttpInfo($evApiKey, $evAccessToken, $id, $body = null)
    {
        $returnType = '\ExaVault\Model\WebhookResponse';
        $request = $this->updateWebhookRequest($evApiKey, $evAccessToken, $id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateWebhook'
     *
     * @param  string $evApiKey API key required to make the API call. (required)
     * @param  string $evAccessToken Access token required to make the API call. (required)
     * @param  int $id Webhook endpoint ID (required)
     * @param  \ExaVault\Model\UpdateWebhookRequestBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWebhookRequest($evApiKey, $evAccessToken, $id, $body = null)
    {
        // verify the required parameter 'evApiKey' is set
        if ($evApiKey === null || (is_array($evApiKey) && count($evApiKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evApiKey when calling updateWebhook'
            );
        }
        // verify the required parameter 'evAccessToken' is set
        if ($evAccessToken === null || (is_array($evAccessToken) && count($evAccessToken) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evAccessToken when calling updateWebhook'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateWebhook'
            );
        }

        $resourcePath = '/webhooks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($evApiKey !== null) {
            $headerParams['ev-api-key'] = ObjectSerializer::toHeaderValue($evApiKey);
        }
        // header params
        if ($evAccessToken !== null) {
            $headerParams['ev-access-token'] = ObjectSerializer::toHeaderValue($evAccessToken);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
