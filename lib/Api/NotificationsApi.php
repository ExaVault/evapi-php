<?php
/**
 * NotificationsApi
 * PHP version 5
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ExaVault API
 *
 * See our API reference documentation at https://www.exavault.com/developer/api-docs/
 *
 * OpenAPI spec version: 2.0
 * Contact: support@exavault.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ExaVault\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ExaVault\ApiException;
use ExaVault\Configuration;
use ExaVault\HeaderSelector;
use ExaVault\ObjectSerializer;

/**
 * NotificationsApi Class Doc Comment
 *
 * @category Class
 * @package  ExaVault
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addNotification
     *
     * Create a new notification
     *
     * @param  string $ev_api_key API Key required to make API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  \ExaVault\Model\AddNotificationRequestBody $body body (optional)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ExaVault\Model\NotificationResponse
     */
    public function addNotification($ev_api_key, $ev_access_token, $body = null)
    {
        list($response) = $this->addNotificationWithHttpInfo($ev_api_key, $ev_access_token, $body);
        return $response;
    }

    /**
     * Operation addNotificationWithHttpInfo
     *
     * Create a new notification
     *
     * @param  string $ev_api_key API Key required to make API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  \ExaVault\Model\AddNotificationRequestBody $body (optional)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ExaVault\Model\NotificationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addNotificationWithHttpInfo($ev_api_key, $ev_access_token, $body = null)
    {
        $returnType = '\ExaVault\Model\NotificationResponse';
        $request = $this->addNotificationRequest($ev_api_key, $ev_access_token, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ExaVault\Model\NotificationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addNotificationAsync
     *
     * Create a new notification
     *
     * @param  string $ev_api_key API Key required to make API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  \ExaVault\Model\AddNotificationRequestBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNotificationAsync($ev_api_key, $ev_access_token, $body = null)
    {
        return $this->addNotificationAsyncWithHttpInfo($ev_api_key, $ev_access_token, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addNotificationAsyncWithHttpInfo
     *
     * Create a new notification
     *
     * @param  string $ev_api_key API Key required to make API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  \ExaVault\Model\AddNotificationRequestBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNotificationAsyncWithHttpInfo($ev_api_key, $ev_access_token, $body = null)
    {
        $returnType = '\ExaVault\Model\NotificationResponse';
        $request = $this->addNotificationRequest($ev_api_key, $ev_access_token, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addNotification'
     *
     * @param  string $ev_api_key API Key required to make API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  \ExaVault\Model\AddNotificationRequestBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addNotificationRequest($ev_api_key, $ev_access_token, $body = null)
    {
        // verify the required parameter 'ev_api_key' is set
        if ($ev_api_key === null || (is_array($ev_api_key) && count($ev_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_api_key when calling addNotification'
            );
        }
        // verify the required parameter 'ev_access_token' is set
        if ($ev_access_token === null || (is_array($ev_access_token) && count($ev_access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_access_token when calling addNotification'
            );
        }

        $resourcePath = '/notifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($ev_api_key !== null) {
            $headerParams['ev-api-key'] = ObjectSerializer::toHeaderValue($ev_api_key);
        }
        // header params
        if ($ev_access_token !== null) {
            $headerParams['ev-access-token'] = ObjectSerializer::toHeaderValue($ev_access_token);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNotificationById
     *
     * Delete a notification
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  int $id ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID. (required)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ExaVault\Model\EmptyResponse
     */
    public function deleteNotificationById($ev_api_key, $ev_access_token, $id)
    {
        list($response) = $this->deleteNotificationByIdWithHttpInfo($ev_api_key, $ev_access_token, $id);
        return $response;
    }

    /**
     * Operation deleteNotificationByIdWithHttpInfo
     *
     * Delete a notification
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  int $id ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID. (required)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ExaVault\Model\EmptyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNotificationByIdWithHttpInfo($ev_api_key, $ev_access_token, $id)
    {
        $returnType = '\ExaVault\Model\EmptyResponse';
        $request = $this->deleteNotificationByIdRequest($ev_api_key, $ev_access_token, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ExaVault\Model\EmptyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNotificationByIdAsync
     *
     * Delete a notification
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  int $id ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNotificationByIdAsync($ev_api_key, $ev_access_token, $id)
    {
        return $this->deleteNotificationByIdAsyncWithHttpInfo($ev_api_key, $ev_access_token, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNotificationByIdAsyncWithHttpInfo
     *
     * Delete a notification
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  int $id ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNotificationByIdAsyncWithHttpInfo($ev_api_key, $ev_access_token, $id)
    {
        $returnType = '\ExaVault\Model\EmptyResponse';
        $request = $this->deleteNotificationByIdRequest($ev_api_key, $ev_access_token, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNotificationById'
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  int $id ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteNotificationByIdRequest($ev_api_key, $ev_access_token, $id)
    {
        // verify the required parameter 'ev_api_key' is set
        if ($ev_api_key === null || (is_array($ev_api_key) && count($ev_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_api_key when calling deleteNotificationById'
            );
        }
        // verify the required parameter 'ev_access_token' is set
        if ($ev_access_token === null || (is_array($ev_access_token) && count($ev_access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_access_token when calling deleteNotificationById'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteNotificationById'
            );
        }

        $resourcePath = '/notifications/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($ev_api_key !== null) {
            $headerParams['ev-api-key'] = ObjectSerializer::toHeaderValue($ev_api_key);
        }
        // header params
        if ($ev_access_token !== null) {
            $headerParams['ev-access-token'] = ObjectSerializer::toHeaderValue($ev_access_token);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNotificationById
     *
     * Get notification details
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  int $id ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID. (required)
     * @param  string $include Related record types to include in the response. You can include multiple types by separating them with commas. Valid options are **ownerUser**, **resource**, and **share**. (optional)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ExaVault\Model\NotificationResponse
     */
    public function getNotificationById($ev_api_key, $ev_access_token, $id, $include = null)
    {
        list($response) = $this->getNotificationByIdWithHttpInfo($ev_api_key, $ev_access_token, $id, $include);
        return $response;
    }

    /**
     * Operation getNotificationByIdWithHttpInfo
     *
     * Get notification details
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  int $id ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID. (required)
     * @param  string $include Related record types to include in the response. You can include multiple types by separating them with commas. Valid options are **ownerUser**, **resource**, and **share**. (optional)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ExaVault\Model\NotificationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNotificationByIdWithHttpInfo($ev_api_key, $ev_access_token, $id, $include = null)
    {
        $returnType = '\ExaVault\Model\NotificationResponse';
        $request = $this->getNotificationByIdRequest($ev_api_key, $ev_access_token, $id, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ExaVault\Model\NotificationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNotificationByIdAsync
     *
     * Get notification details
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  int $id ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID. (required)
     * @param  string $include Related record types to include in the response. You can include multiple types by separating them with commas. Valid options are **ownerUser**, **resource**, and **share**. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNotificationByIdAsync($ev_api_key, $ev_access_token, $id, $include = null)
    {
        return $this->getNotificationByIdAsyncWithHttpInfo($ev_api_key, $ev_access_token, $id, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNotificationByIdAsyncWithHttpInfo
     *
     * Get notification details
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  int $id ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID. (required)
     * @param  string $include Related record types to include in the response. You can include multiple types by separating them with commas. Valid options are **ownerUser**, **resource**, and **share**. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNotificationByIdAsyncWithHttpInfo($ev_api_key, $ev_access_token, $id, $include = null)
    {
        $returnType = '\ExaVault\Model\NotificationResponse';
        $request = $this->getNotificationByIdRequest($ev_api_key, $ev_access_token, $id, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNotificationById'
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  int $id ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID. (required)
     * @param  string $include Related record types to include in the response. You can include multiple types by separating them with commas. Valid options are **ownerUser**, **resource**, and **share**. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNotificationByIdRequest($ev_api_key, $ev_access_token, $id, $include = null)
    {
        // verify the required parameter 'ev_api_key' is set
        if ($ev_api_key === null || (is_array($ev_api_key) && count($ev_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_api_key when calling getNotificationById'
            );
        }
        // verify the required parameter 'ev_access_token' is set
        if ($ev_access_token === null || (is_array($ev_access_token) && count($ev_access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_access_token when calling getNotificationById'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getNotificationById'
            );
        }

        $resourcePath = '/notifications/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include, null);
        }
        // header params
        if ($ev_api_key !== null) {
            $headerParams['ev-api-key'] = ObjectSerializer::toHeaderValue($ev_api_key);
        }
        // header params
        if ($ev_access_token !== null) {
            $headerParams['ev-access-token'] = ObjectSerializer::toHeaderValue($ev_access_token);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listNotifications
     *
     * Get a list of notifications
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  string $type Type of notification include in the list. Valid options are **file**, **folder**, **send_receipt**, **share_receipt**, **file_drop**  If this parameter is not used, only **file** and **folder** type notifications are included in the list. (optional)
     * @param  int $offset Starting notification record in the result set. Can be used for pagination. (optional, default to 0)
     * @param  string $sort What order the list of matches should be in. Valid sort fields are **resourcename**, **date**, **action** and **type**. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.  You can chose multiple options for the sort by separating them with commmas, such as \&quot;type,-date\&quot; to sort by type, then most recent. (optional)
     * @param  int $limit Number of notification records to return. Can be used for pagination. (optional, default to 25)
     * @param  string $include Related records to include in the response. Valid options are **ownerUser**, **resource**, **share** (optional)
     * @param  string $action The kind of action which triggers the notification. Valid choices are **connect** (only for delivery receipts), **download**, **upload**, **delete**, or **all**   **Note** The **all** action matches notifications set to \&quot;all\&quot;, not all notifications. For example, notifications set to trigger only on delete are not included if you filter for action&#x3D;all (optional)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ExaVault\Model\NotificationCollectionResponse
     */
    public function listNotifications($ev_api_key, $ev_access_token, $type = null, $offset = '0', $sort = null, $limit = '25', $include = null, $action = null)
    {
        list($response) = $this->listNotificationsWithHttpInfo($ev_api_key, $ev_access_token, $type, $offset, $sort, $limit, $include, $action);
        return $response;
    }

    /**
     * Operation listNotificationsWithHttpInfo
     *
     * Get a list of notifications
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  string $type Type of notification include in the list. Valid options are **file**, **folder**, **send_receipt**, **share_receipt**, **file_drop**  If this parameter is not used, only **file** and **folder** type notifications are included in the list. (optional)
     * @param  int $offset Starting notification record in the result set. Can be used for pagination. (optional, default to 0)
     * @param  string $sort What order the list of matches should be in. Valid sort fields are **resourcename**, **date**, **action** and **type**. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.  You can chose multiple options for the sort by separating them with commmas, such as \&quot;type,-date\&quot; to sort by type, then most recent. (optional)
     * @param  int $limit Number of notification records to return. Can be used for pagination. (optional, default to 25)
     * @param  string $include Related records to include in the response. Valid options are **ownerUser**, **resource**, **share** (optional)
     * @param  string $action The kind of action which triggers the notification. Valid choices are **connect** (only for delivery receipts), **download**, **upload**, **delete**, or **all**   **Note** The **all** action matches notifications set to \&quot;all\&quot;, not all notifications. For example, notifications set to trigger only on delete are not included if you filter for action&#x3D;all (optional)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ExaVault\Model\NotificationCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listNotificationsWithHttpInfo($ev_api_key, $ev_access_token, $type = null, $offset = '0', $sort = null, $limit = '25', $include = null, $action = null)
    {
        $returnType = '\ExaVault\Model\NotificationCollectionResponse';
        $request = $this->listNotificationsRequest($ev_api_key, $ev_access_token, $type, $offset, $sort, $limit, $include, $action);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ExaVault\Model\NotificationCollectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listNotificationsAsync
     *
     * Get a list of notifications
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  string $type Type of notification include in the list. Valid options are **file**, **folder**, **send_receipt**, **share_receipt**, **file_drop**  If this parameter is not used, only **file** and **folder** type notifications are included in the list. (optional)
     * @param  int $offset Starting notification record in the result set. Can be used for pagination. (optional, default to 0)
     * @param  string $sort What order the list of matches should be in. Valid sort fields are **resourcename**, **date**, **action** and **type**. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.  You can chose multiple options for the sort by separating them with commmas, such as \&quot;type,-date\&quot; to sort by type, then most recent. (optional)
     * @param  int $limit Number of notification records to return. Can be used for pagination. (optional, default to 25)
     * @param  string $include Related records to include in the response. Valid options are **ownerUser**, **resource**, **share** (optional)
     * @param  string $action The kind of action which triggers the notification. Valid choices are **connect** (only for delivery receipts), **download**, **upload**, **delete**, or **all**   **Note** The **all** action matches notifications set to \&quot;all\&quot;, not all notifications. For example, notifications set to trigger only on delete are not included if you filter for action&#x3D;all (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listNotificationsAsync($ev_api_key, $ev_access_token, $type = null, $offset = '0', $sort = null, $limit = '25', $include = null, $action = null)
    {
        return $this->listNotificationsAsyncWithHttpInfo($ev_api_key, $ev_access_token, $type, $offset, $sort, $limit, $include, $action)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listNotificationsAsyncWithHttpInfo
     *
     * Get a list of notifications
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  string $type Type of notification include in the list. Valid options are **file**, **folder**, **send_receipt**, **share_receipt**, **file_drop**  If this parameter is not used, only **file** and **folder** type notifications are included in the list. (optional)
     * @param  int $offset Starting notification record in the result set. Can be used for pagination. (optional, default to 0)
     * @param  string $sort What order the list of matches should be in. Valid sort fields are **resourcename**, **date**, **action** and **type**. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.  You can chose multiple options for the sort by separating them with commmas, such as \&quot;type,-date\&quot; to sort by type, then most recent. (optional)
     * @param  int $limit Number of notification records to return. Can be used for pagination. (optional, default to 25)
     * @param  string $include Related records to include in the response. Valid options are **ownerUser**, **resource**, **share** (optional)
     * @param  string $action The kind of action which triggers the notification. Valid choices are **connect** (only for delivery receipts), **download**, **upload**, **delete**, or **all**   **Note** The **all** action matches notifications set to \&quot;all\&quot;, not all notifications. For example, notifications set to trigger only on delete are not included if you filter for action&#x3D;all (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listNotificationsAsyncWithHttpInfo($ev_api_key, $ev_access_token, $type = null, $offset = '0', $sort = null, $limit = '25', $include = null, $action = null)
    {
        $returnType = '\ExaVault\Model\NotificationCollectionResponse';
        $request = $this->listNotificationsRequest($ev_api_key, $ev_access_token, $type, $offset, $sort, $limit, $include, $action);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listNotifications'
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  string $type Type of notification include in the list. Valid options are **file**, **folder**, **send_receipt**, **share_receipt**, **file_drop**  If this parameter is not used, only **file** and **folder** type notifications are included in the list. (optional)
     * @param  int $offset Starting notification record in the result set. Can be used for pagination. (optional, default to 0)
     * @param  string $sort What order the list of matches should be in. Valid sort fields are **resourcename**, **date**, **action** and **type**. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.  You can chose multiple options for the sort by separating them with commmas, such as \&quot;type,-date\&quot; to sort by type, then most recent. (optional)
     * @param  int $limit Number of notification records to return. Can be used for pagination. (optional, default to 25)
     * @param  string $include Related records to include in the response. Valid options are **ownerUser**, **resource**, **share** (optional)
     * @param  string $action The kind of action which triggers the notification. Valid choices are **connect** (only for delivery receipts), **download**, **upload**, **delete**, or **all**   **Note** The **all** action matches notifications set to \&quot;all\&quot;, not all notifications. For example, notifications set to trigger only on delete are not included if you filter for action&#x3D;all (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listNotificationsRequest($ev_api_key, $ev_access_token, $type = null, $offset = '0', $sort = null, $limit = '25', $include = null, $action = null)
    {
        // verify the required parameter 'ev_api_key' is set
        if ($ev_api_key === null || (is_array($ev_api_key) && count($ev_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_api_key when calling listNotifications'
            );
        }
        // verify the required parameter 'ev_access_token' is set
        if ($ev_access_token === null || (is_array($ev_access_token) && count($ev_access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_access_token when calling listNotifications'
            );
        }

        $resourcePath = '/notifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include, null);
        }
        // query params
        if ($action !== null) {
            $queryParams['action'] = ObjectSerializer::toQueryValue($action, null);
        }
        // header params
        if ($ev_api_key !== null) {
            $headerParams['ev-api-key'] = ObjectSerializer::toHeaderValue($ev_api_key);
        }
        // header params
        if ($ev_access_token !== null) {
            $headerParams['ev-access-token'] = ObjectSerializer::toHeaderValue($ev_access_token);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNotificationById
     *
     * Update a notification
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  int $id ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID. (required)
     * @param  \ExaVault\Model\UpdateNotificationByIdRequestBody $body body (optional)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ExaVault\Model\NotificationResponse
     */
    public function updateNotificationById($ev_api_key, $ev_access_token, $id, $body = null)
    {
        list($response) = $this->updateNotificationByIdWithHttpInfo($ev_api_key, $ev_access_token, $id, $body);
        return $response;
    }

    /**
     * Operation updateNotificationByIdWithHttpInfo
     *
     * Update a notification
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  int $id ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID. (required)
     * @param  \ExaVault\Model\UpdateNotificationByIdRequestBody $body (optional)
     *
     * @throws \ExaVault\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ExaVault\Model\NotificationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNotificationByIdWithHttpInfo($ev_api_key, $ev_access_token, $id, $body = null)
    {
        $returnType = '\ExaVault\Model\NotificationResponse';
        $request = $this->updateNotificationByIdRequest($ev_api_key, $ev_access_token, $id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ExaVault\Model\NotificationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNotificationByIdAsync
     *
     * Update a notification
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  int $id ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID. (required)
     * @param  \ExaVault\Model\UpdateNotificationByIdRequestBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNotificationByIdAsync($ev_api_key, $ev_access_token, $id, $body = null)
    {
        return $this->updateNotificationByIdAsyncWithHttpInfo($ev_api_key, $ev_access_token, $id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNotificationByIdAsyncWithHttpInfo
     *
     * Update a notification
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  int $id ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID. (required)
     * @param  \ExaVault\Model\UpdateNotificationByIdRequestBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNotificationByIdAsyncWithHttpInfo($ev_api_key, $ev_access_token, $id, $body = null)
    {
        $returnType = '\ExaVault\Model\NotificationResponse';
        $request = $this->updateNotificationByIdRequest($ev_api_key, $ev_access_token, $id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNotificationById'
     *
     * @param  string $ev_api_key API Key required to make the API call. (required)
     * @param  string $ev_access_token Access token required to make the API call. (required)
     * @param  int $id ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID. (required)
     * @param  \ExaVault\Model\UpdateNotificationByIdRequestBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateNotificationByIdRequest($ev_api_key, $ev_access_token, $id, $body = null)
    {
        // verify the required parameter 'ev_api_key' is set
        if ($ev_api_key === null || (is_array($ev_api_key) && count($ev_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_api_key when calling updateNotificationById'
            );
        }
        // verify the required parameter 'ev_access_token' is set
        if ($ev_access_token === null || (is_array($ev_access_token) && count($ev_access_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_access_token when calling updateNotificationById'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateNotificationById'
            );
        }

        $resourcePath = '/notifications/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($ev_api_key !== null) {
            $headerParams['ev-api-key'] = ObjectSerializer::toHeaderValue($ev_api_key);
        }
        // header params
        if ($ev_access_token !== null) {
            $headerParams['ev-access-token'] = ObjectSerializer::toHeaderValue($ev_access_token);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
